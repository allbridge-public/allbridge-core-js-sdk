/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from "@algorandfoundation/algokit-utils/types/algorand-client";
import { ABIReturn, AppReturn, SendAppTransactionResult } from "@algorandfoundation/algokit-utils/types/app";
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from "@algorandfoundation/algokit-utils/types/app-arc56";
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from "@algorandfoundation/algokit-utils/types/app-client";
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from "@algorandfoundation/algokit-utils/types/app-factory";
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from "@algorandfoundation/algokit-utils/types/composer";
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from "@algorandfoundation/algokit-utils/types/transaction";
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from "algosdk";

export const APP_SPEC: Arc56Contract = {
  name: "Bridge",
  structs: {},
  methods: [
    {
      name: "createApplication",
      args: [
        { type: "address", name: "owner" },
        { type: "byte", name: "chainId" },
        { type: "application", name: "messenger" },
        { type: "application", name: "gasOracle" },
      ],
      returns: { type: "void" },
      actions: { create: ["NoOp"], call: [] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "optInAsset",
      args: [{ type: "uint64", name: "assetId" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "noop",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "swapAndBridge",
      args: [
        { type: "uint64", name: "tokenId" },
        { type: "byte[32]", name: "recipient" },
        { type: "byte", name: "destinationChainId" },
        { type: "byte[32]", name: "receiveToken" },
        { type: "byte[32]", name: "nonce" },
        {
          type: "uint64",
          name: "feeTokenAmount",
          defaultValue: { source: "literal", data: "AAAAAAAAAAA=", type: "uint64" },
        },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        { name: "BridgingFeeFromTokens", args: [{ type: "uint64", name: "fee" }] },
        {
          name: "ReceiveFee",
          args: [
            { type: "uint64", name: "bridgeTransactionCost" },
            { type: "uint64", name: "messageTransactionCost" },
          ],
        },
        {
          name: "TokensSent",
          args: [
            { type: "uint64", name: "amount" },
            { type: "byte[32]", name: "recipient" },
            { type: "byte", name: "destinationChainId" },
            { type: "byte[32]", name: "receiveToken" },
            { type: "byte[32]", name: "nonce" },
            { type: "byte", name: "messenger" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "receiveTokens",
      args: [
        { type: "uint64", name: "amount" },
        { type: "byte[32]", name: "recipient" },
        { type: "byte", name: "sourceChainId" },
        { type: "byte[32]", name: "receiveToken" },
        { type: "byte[32]", name: "nonce" },
        { type: "uint64", name: "receiveAmountMin" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "TokensReceived",
          args: [
            { type: "uint64", name: "receiveAmount" },
            { type: "address", name: "recipient" },
            { type: "byte[32]", name: "nonce" },
            { type: "byte", name: "messenger" },
            { type: "byte[32]", name: "message" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "registerBridge",
      args: [
        { type: "byte", name: "chainId" },
        { type: "byte[32]", name: "bridgeAddress" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "addBridgeToken",
      args: [
        { type: "byte", name: "chainId" },
        { type: "byte[32]", name: "tokenAddress" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "removeBridgeToken",
      args: [
        { type: "byte", name: "chainId" },
        { type: "byte[32]", name: "tokenAddress" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "withdrawGasTokens",
      args: [{ type: "uint64", name: "amount" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "withdrawBridgingFeeInTokens",
      args: [{ type: "uint64", name: "assetId" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "getBridgingCostInTokens",
      args: [
        { type: "byte", name: "destinationChainId" },
        { type: "uint64", name: "tokenId" },
      ],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "hashMessage",
      args: [
        { type: "uint64", name: "amount" },
        { type: "byte[32]", name: "recipient" },
        { type: "byte", name: "sourceChainId" },
        { type: "byte", name: "destinationChainId" },
        { type: "byte[32]", name: "receiveToken" },
        { type: "byte[32]", name: "nonce" },
      ],
      returns: { type: "byte[32]" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "isOtherBridgeTokenSupported",
      args: [
        { type: "byte", name: "chainId" },
        { type: "byte[32]", name: "token" },
      ],
      returns: { type: "bool" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getTransactionCost",
      args: [{ type: "byte", name: "chainId" }],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getReceiveTokensCost",
      args: [],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getSendTransactionStorageCost",
      args: [],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "swap",
      args: [
        { type: "uint64", name: "tokenId", desc: "The token to be swapped." },
        { type: "uint64", name: "receiveTokenId", desc: "The token to receive in exchange for the swapped token." },
        { type: "address", name: "recipient", desc: "The address to receive the tokens." },
        {
          type: "uint64",
          name: "receiveAmountMin",
          desc: "The minimum amount of tokens required to receive during the swap.",
        },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "Swapped",
          args: [
            { type: "address", name: "sender" },
            { type: "address", name: "recipient" },
            { type: "uint64", name: "tokenId" },
            { type: "uint64", name: "receiveTokenId" },
            { type: "uint64", name: "amount" },
            { type: "uint64", name: "receivedAmount" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "addPool",
      args: [
        { type: "uint64", name: "poolId", desc: "The address of the `Pool` contract." },
        { type: "uint64", name: "tokenId", desc: "The address of the token in the liquidity pool." },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "removePool",
      args: [{ type: "uint64", name: "tokenId" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "stopSwap",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "startSwap",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "setStopAuthority",
      args: [{ type: "address", name: "stopAuthority" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "setRebalancer",
      args: [{ type: "address", name: "rebalancer" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "getGasUsage",
      args: [{ type: "byte", name: "chainId" }],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "setGasUsage",
      args: [
        { type: "byte", name: "chainId" },
        { type: "uint64", name: "gasAmount" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "setGasOracle",
      args: [{ type: "application", name: "gasOracle" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "getTransactionRelayerCost",
      args: [{ type: "byte", name: "chainId" }],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "transferOwnership",
      args: [{ type: "address", name: "newOwner" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  networks: {},
  state: {
    schema: { global: { ints: 3, bytes: 4 }, local: { ints: 0, bytes: 0 } },
    keys: {
      global: {
        chainId: { keyType: "AVMString", valueType: "byte", key: "Y2hhaW5JZA==" },
        messenger: { keyType: "AVMString", valueType: "AVMUint64", key: "bWVzc2VuZ2Vy" },
        stopAuthority: { keyType: "AVMString", valueType: "address", key: "c3RvcEF1dGhvcml0eQ==" },
        rebalancer: { keyType: "AVMString", valueType: "address", key: "cmViYWxhbmNlcg==" },
        canSwap: { keyType: "AVMString", valueType: "AVMUint64", key: "Y2FuU3dhcA==" },
        gasOracle: { keyType: "AVMString", valueType: "AVMUint64", key: "Z2FzT3JhY2xl" },
        owner: { keyType: "AVMString", valueType: "address", key: "b3duZXI=" },
      },
      local: {},
      box: {},
    },
    maps: {
      global: {},
      local: {},
      box: {
        processedMessages: { keyType: "byte[32]", valueType: "byte[0]", prefix: "bQ==" },
        sentMessages: { keyType: "byte[32]", valueType: "byte[0]", prefix: "cw==" },
        otherBridges: { keyType: "byte", valueType: "byte[32]", prefix: "Yg==" },
        otherBridgeTokens: { keyType: "AVMBytes", valueType: "byte[0]", prefix: "dA==" },
        pools: { keyType: "uint64", valueType: "uint64", prefix: "cA==" },
        fromGasOracleScalingFactor: { keyType: "uint64", valueType: "uint64", prefix: "ZQ==" },
        bridgingFeeConversionScalingFactor: { keyType: "uint64", valueType: "uint64", prefix: "Zg==" },
        gasUsage: { keyType: "byte", valueType: "uint64", prefix: "Zw==" },
      },
    },
  },
  bareActions: { create: [], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        { pc: [906], errorMessage: "Asset must go to app" },
        { pc: [889], errorMessage: "Asset txn missing" },
        { pc: [1366, 1844, 2135, 2221, 2315, 2357], errorMessage: "Box must have value" },
        { pc: [1122], errorMessage: "Bridge: amount too low for fee" },
        { pc: [1130], errorMessage: "Bridge: bridge to the zero address" },
        { pc: [1504], errorMessage: "Bridge: message processed" },
        { pc: [1547], errorMessage: "Bridge: no message" },
        { pc: [1327, 1455], errorMessage: "Bridge: not enough fee" },
        { pc: [1446], errorMessage: "Bridge: source not registered" },
        { pc: [1217], errorMessage: "Bridge: tokens already sent" },
        { pc: [1180], errorMessage: "Bridge: unknown chain or token" },
        { pc: [1167], errorMessage: "Bridge: wrong destination chain" },
        { pc: [1258, 1412, 1544, 1783, 1830, 2199, 2300, 2401], errorMessage: "Bytes has valid prefix" },
        { pc: [927], errorMessage: "CloseTo not allowed" },
        { pc: [1223], errorMessage: "Index access is out of bounds" },
        {
          pc: [
            341, 356, 376, 394, 413, 433, 448, 463, 475, 487, 503, 523, 550, 562, 574, 594, 622, 657, 681, 697, 713,
            731, 749, 767, 799, 831, 840, 856,
          ],
          errorMessage: "OnCompletion is not NoOp",
        },
        { pc: [2411], errorMessage: "Only owner" },
        { pc: [920], errorMessage: "Rekey not allowed" },
        { pc: [2080], errorMessage: "Router: is not stopAuthority" },
        { pc: [2216], errorMessage: "Router: no pool" },
        { pc: [2130], errorMessage: "Router: no receive pool" },
        { pc: [1112, 1436, 1933], errorMessage: "Router: swap prohibited" },
        { pc: [913], errorMessage: "Wrong asset" },
        { pc: [1710], errorMessage: "account opted into asset" },
        { pc: [1266, 2226], errorMessage: "application exists" },
        { pc: [2021], errorMessage: "asset exists" },
        { pc: [860], errorMessage: "can only call when creating" },
        {
          pc: [
            344, 359, 379, 397, 416, 436, 451, 466, 478, 490, 506, 526, 553, 565, 577, 597, 625, 660, 684, 700, 716,
            734, 752, 770, 802, 834, 843,
          ],
          errorMessage: "can only call when not creating",
        },
        {
          pc: [
            1111, 1163, 1185, 1230, 1263, 1270, 1375, 1380, 1435, 1460, 1512, 1678, 1718, 1753, 1790, 1932, 2078, 2147,
            2252, 2363, 2409,
          ],
          errorMessage: "check GlobalState exists",
        },
        { pc: [1896], errorMessage: "invalid size" },
        { pc: [899], errorMessage: "transaction type is axfer" },
        { pc: [975], errorMessage: "transaction type is pay" },
      ],
      pcOffsetMethod: "none",
    },
    clear: { sourceInfo: [], pcOffsetMethod: "none" },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  byteCode: {
    approval:
      "CiAFAAEGBNR6JhAEFR98dQdjYW5Td2FwCW1lc3NlbmdlcgVvd25lcglnYXNPcmFjbGUHY2hhaW5JZApyZWJhbGFuY2VyAXQBcAEADXN0b3BBdXRob3JpdHkBAQFnBENBeqME90dbggwVH3x1AAAAAAAAPVQxGEAACSKvJwZMZykjZzEbQQDJgg0E//goQQRl9wVzBOg6h6sELJ9oRwQxkZsoBE66ByEExhftcwRXUxVgBGOAgngEBlB8agT1+W6zBEsGLKAEw83ZKicNggkEB9+EKQSAxccPBPqxEaIE7xX4VQRrHuIjBBhwpJIENVcyTQQEsWHxBNKzV+snDoIEBAylrnoEOXuRiwTL/G0CBOF7r7Q2GgCOHAIFAfUB7AHMAawBmgGIAXYBZgFWAT4BGwD/AOsA3wDTALgApACUAIgAfABtAF4ASgA3ACUAEQACIkMxGRREMRhENhoBiAgOI0MxGRREMRhENhoBiAe7FihMULAjQzEZFEQxGEQ2GgEXwDKIB5gjQzEZFEQxGEQ2GgE2GgIXiAd1I0MxGRREMRhENhoBiAdYFihMULAjQzEZFEQxGEQ2GgGIBn0jQzEZFEQxGEQ2GgGIBmIjQzEZFEQxGESIBk8jQzEZFEQxGESIBjYjQzEZFEQxGEQ2GgEXiAYWI0MxGRREMRhENhoBFzYaAheIBckjQzEZFEQxGEQ2GgEXNhoCFzYaAzYaBBeIBWUjQzEZFEQxGEQnD7AjQzEZFEQxGEQnD7AjQzEZFEQxGEQ2GgGIBTIWKExQsCNDMRkURDEYRDYaATYaAogFCycJIk8CVChMULAjQzEZFEQxGEQ2GgEXNhoCNhoDNhoENhoFNhoGiASvKExQsCNDMRkURDEYRDYaATYaAheIBC4WKExQsCNDMRkURDEYRDYaAReIA+kjQzEZFEQxGEQ2GgEXiAPAI0MxGRREMRhENhoBNhoCiAOcI0MxGRREMRhENhoBNhoCiAN3I0MxGRREMRhENhoBNhoCiANVI0MxGRREMRhENhoBFzYaAjYaAzYaBDYaBTYaBheIAnsjQzEZFEQxGEQ2GgEXNhoCNhoDNhoENhoFNhoGF4gBFyNDMRkURDEYRCNDMRkURDEYRDYaAReIAMkjQzEZFEQxGBRENhoBNhoCNhoDF8AyNhoEF8AyiACPI0OKAQExFkQxFiMJSTgQJRJESTgUMgoSREk4EYv/EkRJOCAyAxJESTgVMgMSRDgSiYoBAYAASTEWi/8MQQAEIowAiTEWi/8JSYwBOBBJjAAjE0EABCKMAImLACMSRIsBOAcyChNBAAQijACJiwE4IDIDE0EABCKMAImLATgJMgMTQQAEIowAiYsBOAiMAImKBAAri/xnJwSL/2cnCov8ZycFi/1nKov+Z4mKAQCIBUKxMgqyFCKyEov/shElshAisgGzgBhCcmlkZ2U6IG9wdC1pbiBjb21wbGV0ZWSwiYoGACIpZUREi/qI/xZJi/8NRIEgr4v7EhREgQKI/zOL/0AA1SKLAQiLAIv/CYv6MQBPAogEEyInBWVEi/wTRIv8i/1QJwdMUL1FAUQiJwVlREsBi/tPAov8i/2L/ogChov8iALEgAFzSwJQSb1FARREgAC/SwFXAQGxIiplRCcNshqyGLIaJLIQIrIBs7Q+SVcEAExXAAQoEkQXIiplRHIIRCIqZUSxTLIHSwGyCCOyECKyAbaABKMkmYmyGk8DshqyGCSyECKyAbNLARZLARZQgARLVUGbTFCwCE8CDkQWi/tQi/xQi/1Qi/5QJwtQgAQin7rsTFCwiYv6FoABZkxQvkwXTESL/wuxIicEZUQiJwVlRIAEHbcM3bIashqyGCSyECKyAbO0PklXBABMVwAEKBJEFwpJFoAE4H9rNkxQsEL+4YoGACIpZUREgAFii/xQvUUBRCOI/fhJIQQPRCInBWVEi/qL+4v8TwOL/Yv+iAFzSTEAUAJMUQACTFECIFBJTgKAAW1LAVBJvUUBFESAAL+xIiplRIAEM+FHqrIashiyGiSyECKyAbO0PklXBABMVwAEKBJEIlNEi/2BGFuL+4v6i/+IAipMSSEECUwhBA1BABCxi/uyB4sCsggjshAisgGziwEWi/tQi/5QJwtQiwBQgARFg2rWTFCwiYoCAIgDD4ABYov+UIv/v4mKAgCIAv+L/ov/UCcHTFCAAL+JigIAiALsi/6L/1AnB0xQvEiJigEAiALasSIrZUSyB4v/sggjshAisgGziYoBAIgCwTIKSYv/cABMSU8CREEAGrEiK2VEshSLAbISi/+yEYsAsgAlshAisgGziYoCAYv+iAIqsSIqZUQnDrIai/6yGrIYJLIQIrIBs7Q+SVcEAExXAAQoEkQXsSInBGVETgIIFoAEe/fVDLIai/6yGrIashgkshAisgGztD5JVwQATFcABCgSRBeL/xaAAWVMUL5MF0xEComKBgGBGK+L+hZQgR+vi/xQTIv7UExQi/5Qi/9QJwtQAov8FyJMVov9FyNMVkkVgSASRImKAgGL/ov/UCcHTFC9RQGJigEBi/+IAachBAiJigQAIillREQxAIv8iPvfi/xLAksCiAD8i/2L/k8Ci/+IAJuL/BaL/RZPAxZPAxZPBIv+UE8EUE8DUE8CUExQgAQVQESzTFCwiYoCAIgBj4v/FicISwFQi/4Wv4v/cQFEgQlMCUkkCIABZksDUIEKTwKUFr+AAWVPAlCBCk8ClBa/iYoBAIgBVov/FicITFC8SIkxACInCmVEEkQpImeJiAE8KSNniYoBAIgBMicKi/9niYoBAIgBJicGi/9niYoEAYv8FicITFBJvUUBRL5MF0xEsYv+Fov/FiInBmVEi/0SJwkiTwJUgAQNG0wGshqL/bIaTwKyGkyyGrIashgkshAisgGztD5JVwQATFcABCgSRBeJigMBi/0WJwhMUEm9RQFEvkwXTESxSXIIRLIUi/+yEov9shElshAisgGzsYv/FiInBmVEi/4SJwkiTwJUgATZeK0UshqL/rIaTLIashqyGCSyECKyAbO0PklXBABMVwAEKBJEF4mKAQEnDIv/UL5MF0xEiYoCAIgAUScMi/5Qi/8Wv4mKAQCIAEEnBIv/Z4mKAQEnDIv/UL5MF0xEsSInBGVETBaABMKvzNGyGov/shqyGrIYJLIQIrIBs7Q+SVcEAExXAAQoEkQXiTEAIitlRBJEiYoBAIj/8SuL/2eJ",
    clear: "CoEBQw==",
  },
  events: [
    { name: "BridgingFeeFromTokens", args: [{ type: "uint64", name: "fee" }] },
    {
      name: "ReceiveFee",
      args: [
        { type: "uint64", name: "bridgeTransactionCost" },
        { type: "uint64", name: "messageTransactionCost" },
      ],
    },
    {
      name: "TokensSent",
      args: [
        { type: "uint64", name: "amount" },
        { type: "byte[32]", name: "recipient" },
        { type: "byte", name: "destinationChainId" },
        { type: "byte[32]", name: "receiveToken" },
        { type: "byte[32]", name: "nonce" },
        { type: "byte", name: "messenger" },
      ],
    },
    {
      name: "TokensReceived",
      args: [
        { type: "uint64", name: "receiveAmount" },
        { type: "address", name: "recipient" },
        { type: "byte[32]", name: "nonce" },
        { type: "byte", name: "messenger" },
        { type: "byte[32]", name: "message" },
      ],
    },
    {
      name: "Swapped",
      args: [
        { type: "address", name: "sender" },
        { type: "address", name: "recipient" },
        { type: "uint64", name: "tokenId" },
        { type: "uint64", name: "receiveTokenId" },
        { type: "uint64", name: "amount" },
        { type: "uint64", name: "receivedAmount" },
      ],
    },
  ],
  templateVariables: {},
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString("utf-8") : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never;

/**
 * The argument types for the Bridge contract
 */
export type BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    "createApplication(address,byte,application,application)void": {
      owner: string;
      chainId: number;
      messenger: bigint;
      gasOracle: bigint;
    };
    "optInAsset(uint64)void": {
      assetId: bigint | number;
    };
    "noop()void": Record<string, never>;
    "swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void": {
      tokenId: bigint | number;
      recipient: Uint8Array;
      destinationChainId: number;
      receiveToken: Uint8Array;
      nonce: Uint8Array;
      feeTokenAmount?: bigint | number;
    };
    "receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void": {
      amount: bigint | number;
      recipient: Uint8Array;
      sourceChainId: number;
      receiveToken: Uint8Array;
      nonce: Uint8Array;
      receiveAmountMin: bigint | number;
    };
    "registerBridge(byte,byte[32])void": {
      chainId: number;
      bridgeAddress: Uint8Array;
    };
    "addBridgeToken(byte,byte[32])void": {
      chainId: number;
      tokenAddress: Uint8Array;
    };
    "removeBridgeToken(byte,byte[32])void": {
      chainId: number;
      tokenAddress: Uint8Array;
    };
    "withdrawGasTokens(uint64)void": {
      amount: bigint | number;
    };
    "withdrawBridgingFeeInTokens(uint64)void": {
      assetId: bigint | number;
    };
    "getBridgingCostInTokens(byte,uint64)uint64": {
      destinationChainId: number;
      tokenId: bigint | number;
    };
    "hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]": {
      amount: bigint | number;
      recipient: Uint8Array;
      sourceChainId: number;
      destinationChainId: number;
      receiveToken: Uint8Array;
      nonce: Uint8Array;
    };
    "isOtherBridgeTokenSupported(byte,byte[32])bool": {
      chainId: number;
      token: Uint8Array;
    };
    "getTransactionCost(byte)uint64": {
      chainId: number;
    };
    "getReceiveTokensCost()uint64": Record<string, never>;
    "getSendTransactionStorageCost()uint64": Record<string, never>;
    "swap(uint64,uint64,address,uint64)void": {
      /**
       * The token to be swapped.
       */
      tokenId: bigint | number;
      /**
       * The token to receive in exchange for the swapped token.
       */
      receiveTokenId: bigint | number;
      /**
       * The address to receive the tokens.
       */
      recipient: string;
      /**
       * The minimum amount of tokens required to receive during the swap.
       */
      receiveAmountMin: bigint | number;
    };
    "addPool(uint64,uint64)void": {
      /**
       * The address of the `Pool` contract.
       */
      poolId: bigint | number;
      /**
       * The address of the token in the liquidity pool.
       */
      tokenId: bigint | number;
    };
    "removePool(uint64)void": {
      tokenId: bigint | number;
    };
    "stopSwap()void": Record<string, never>;
    "startSwap()void": Record<string, never>;
    "setStopAuthority(address)void": {
      stopAuthority: string;
    };
    "setRebalancer(address)void": {
      rebalancer: string;
    };
    "getGasUsage(byte)uint64": {
      chainId: number;
    };
    "setGasUsage(byte,uint64)void": {
      chainId: number;
      gasAmount: bigint | number;
    };
    "setGasOracle(application)void": {
      gasOracle: bigint;
    };
    "getTransactionRelayerCost(byte)uint64": {
      chainId: number;
    };
    "transferOwnership(address)void": {
      newOwner: string;
    };
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    "createApplication(address,byte,application,application)void": [
      owner: string,
      chainId: number,
      messenger: bigint,
      gasOracle: bigint,
    ];
    "optInAsset(uint64)void": [assetId: bigint | number];
    "noop()void": [];
    "swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void": [
      tokenId: bigint | number,
      recipient: Uint8Array,
      destinationChainId: number,
      receiveToken: Uint8Array,
      nonce: Uint8Array,
      feeTokenAmount: bigint | number | undefined,
    ];
    "receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void": [
      amount: bigint | number,
      recipient: Uint8Array,
      sourceChainId: number,
      receiveToken: Uint8Array,
      nonce: Uint8Array,
      receiveAmountMin: bigint | number,
    ];
    "registerBridge(byte,byte[32])void": [chainId: number, bridgeAddress: Uint8Array];
    "addBridgeToken(byte,byte[32])void": [chainId: number, tokenAddress: Uint8Array];
    "removeBridgeToken(byte,byte[32])void": [chainId: number, tokenAddress: Uint8Array];
    "withdrawGasTokens(uint64)void": [amount: bigint | number];
    "withdrawBridgingFeeInTokens(uint64)void": [assetId: bigint | number];
    "getBridgingCostInTokens(byte,uint64)uint64": [destinationChainId: number, tokenId: bigint | number];
    "hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]": [
      amount: bigint | number,
      recipient: Uint8Array,
      sourceChainId: number,
      destinationChainId: number,
      receiveToken: Uint8Array,
      nonce: Uint8Array,
    ];
    "isOtherBridgeTokenSupported(byte,byte[32])bool": [chainId: number, token: Uint8Array];
    "getTransactionCost(byte)uint64": [chainId: number];
    "getReceiveTokensCost()uint64": [];
    "getSendTransactionStorageCost()uint64": [];
    "swap(uint64,uint64,address,uint64)void": [
      tokenId: bigint | number,
      receiveTokenId: bigint | number,
      recipient: string,
      receiveAmountMin: bigint | number,
    ];
    "addPool(uint64,uint64)void": [poolId: bigint | number, tokenId: bigint | number];
    "removePool(uint64)void": [tokenId: bigint | number];
    "stopSwap()void": [];
    "startSwap()void": [];
    "setStopAuthority(address)void": [stopAuthority: string];
    "setRebalancer(address)void": [rebalancer: string];
    "getGasUsage(byte)uint64": [chainId: number];
    "setGasUsage(byte,uint64)void": [chainId: number, gasAmount: bigint | number];
    "setGasOracle(application)void": [gasOracle: bigint];
    "getTransactionRelayerCost(byte)uint64": [chainId: number];
    "transferOwnership(address)void": [newOwner: string];
  };
};

/**
 * The return type for each method
 */
export type BridgeReturns = {
  "createApplication(address,byte,application,application)void": void;
  "optInAsset(uint64)void": void;
  "noop()void": void;
  "swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void": void;
  "receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void": void;
  "registerBridge(byte,byte[32])void": void;
  "addBridgeToken(byte,byte[32])void": void;
  "removeBridgeToken(byte,byte[32])void": void;
  "withdrawGasTokens(uint64)void": void;
  "withdrawBridgingFeeInTokens(uint64)void": void;
  "getBridgingCostInTokens(byte,uint64)uint64": bigint;
  "hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]": Uint8Array;
  "isOtherBridgeTokenSupported(byte,byte[32])bool": boolean;
  "getTransactionCost(byte)uint64": bigint;
  "getReceiveTokensCost()uint64": bigint;
  "getSendTransactionStorageCost()uint64": bigint;
  "swap(uint64,uint64,address,uint64)void": void;
  "addPool(uint64,uint64)void": void;
  "removePool(uint64)void": void;
  "stopSwap()void": void;
  "startSwap()void": void;
  "setStopAuthority(address)void": void;
  "setRebalancer(address)void": void;
  "getGasUsage(byte)uint64": bigint;
  "setGasUsage(byte,uint64)void": void;
  "setGasOracle(application)void": void;
  "getTransactionRelayerCost(byte)uint64": bigint;
  "transferOwnership(address)void": void;
};

/**
 * Defines the types of available calls and state of the Bridge smart contract.
 */
export type BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication(address,byte,application,application)void" | "createApplication",
    {
      argsObj: BridgeArgs["obj"]["createApplication(address,byte,application,application)void"];
      argsTuple: BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"];
      returns: BridgeReturns["createApplication(address,byte,application,application)void"];
    }
  > &
    Record<
      "optInAsset(uint64)void" | "optInAsset",
      {
        argsObj: BridgeArgs["obj"]["optInAsset(uint64)void"];
        argsTuple: BridgeArgs["tuple"]["optInAsset(uint64)void"];
        returns: BridgeReturns["optInAsset(uint64)void"];
      }
    > &
    Record<
      "noop()void" | "noop",
      {
        argsObj: BridgeArgs["obj"]["noop()void"];
        argsTuple: BridgeArgs["tuple"]["noop()void"];
        returns: BridgeReturns["noop()void"];
      }
    > &
    Record<
      "swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void" | "swapAndBridge",
      {
        argsObj: BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"];
        argsTuple: BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"];
        returns: BridgeReturns["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"];
      }
    > &
    Record<
      "receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void" | "receiveTokens",
      {
        argsObj: BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"];
        argsTuple: BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"];
        returns: BridgeReturns["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"];
      }
    > &
    Record<
      "registerBridge(byte,byte[32])void" | "registerBridge",
      {
        argsObj: BridgeArgs["obj"]["registerBridge(byte,byte[32])void"];
        argsTuple: BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"];
        returns: BridgeReturns["registerBridge(byte,byte[32])void"];
      }
    > &
    Record<
      "addBridgeToken(byte,byte[32])void" | "addBridgeToken",
      {
        argsObj: BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"];
        argsTuple: BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"];
        returns: BridgeReturns["addBridgeToken(byte,byte[32])void"];
      }
    > &
    Record<
      "removeBridgeToken(byte,byte[32])void" | "removeBridgeToken",
      {
        argsObj: BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"];
        argsTuple: BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"];
        returns: BridgeReturns["removeBridgeToken(byte,byte[32])void"];
      }
    > &
    Record<
      "withdrawGasTokens(uint64)void" | "withdrawGasTokens",
      {
        argsObj: BridgeArgs["obj"]["withdrawGasTokens(uint64)void"];
        argsTuple: BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"];
        returns: BridgeReturns["withdrawGasTokens(uint64)void"];
      }
    > &
    Record<
      "withdrawBridgingFeeInTokens(uint64)void" | "withdrawBridgingFeeInTokens",
      {
        argsObj: BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"];
        argsTuple: BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"];
        returns: BridgeReturns["withdrawBridgingFeeInTokens(uint64)void"];
      }
    > &
    Record<
      "getBridgingCostInTokens(byte,uint64)uint64" | "getBridgingCostInTokens",
      {
        argsObj: BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"];
        argsTuple: BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"];
        returns: BridgeReturns["getBridgingCostInTokens(byte,uint64)uint64"];
      }
    > &
    Record<
      "hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]" | "hashMessage",
      {
        argsObj: BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"];
        argsTuple: BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"];
        returns: BridgeReturns["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"];
      }
    > &
    Record<
      "isOtherBridgeTokenSupported(byte,byte[32])bool" | "isOtherBridgeTokenSupported",
      {
        argsObj: BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"];
        argsTuple: BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"];
        returns: BridgeReturns["isOtherBridgeTokenSupported(byte,byte[32])bool"];
      }
    > &
    Record<
      "getTransactionCost(byte)uint64" | "getTransactionCost",
      {
        argsObj: BridgeArgs["obj"]["getTransactionCost(byte)uint64"];
        argsTuple: BridgeArgs["tuple"]["getTransactionCost(byte)uint64"];
        returns: BridgeReturns["getTransactionCost(byte)uint64"];
      }
    > &
    Record<
      "getReceiveTokensCost()uint64" | "getReceiveTokensCost",
      {
        argsObj: BridgeArgs["obj"]["getReceiveTokensCost()uint64"];
        argsTuple: BridgeArgs["tuple"]["getReceiveTokensCost()uint64"];
        returns: BridgeReturns["getReceiveTokensCost()uint64"];
      }
    > &
    Record<
      "getSendTransactionStorageCost()uint64" | "getSendTransactionStorageCost",
      {
        argsObj: BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"];
        argsTuple: BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"];
        returns: BridgeReturns["getSendTransactionStorageCost()uint64"];
      }
    > &
    Record<
      "swap(uint64,uint64,address,uint64)void" | "swap",
      {
        argsObj: BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"];
        argsTuple: BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"];
        returns: BridgeReturns["swap(uint64,uint64,address,uint64)void"];
      }
    > &
    Record<
      "addPool(uint64,uint64)void" | "addPool",
      {
        argsObj: BridgeArgs["obj"]["addPool(uint64,uint64)void"];
        argsTuple: BridgeArgs["tuple"]["addPool(uint64,uint64)void"];
        returns: BridgeReturns["addPool(uint64,uint64)void"];
      }
    > &
    Record<
      "removePool(uint64)void" | "removePool",
      {
        argsObj: BridgeArgs["obj"]["removePool(uint64)void"];
        argsTuple: BridgeArgs["tuple"]["removePool(uint64)void"];
        returns: BridgeReturns["removePool(uint64)void"];
      }
    > &
    Record<
      "stopSwap()void" | "stopSwap",
      {
        argsObj: BridgeArgs["obj"]["stopSwap()void"];
        argsTuple: BridgeArgs["tuple"]["stopSwap()void"];
        returns: BridgeReturns["stopSwap()void"];
      }
    > &
    Record<
      "startSwap()void" | "startSwap",
      {
        argsObj: BridgeArgs["obj"]["startSwap()void"];
        argsTuple: BridgeArgs["tuple"]["startSwap()void"];
        returns: BridgeReturns["startSwap()void"];
      }
    > &
    Record<
      "setStopAuthority(address)void" | "setStopAuthority",
      {
        argsObj: BridgeArgs["obj"]["setStopAuthority(address)void"];
        argsTuple: BridgeArgs["tuple"]["setStopAuthority(address)void"];
        returns: BridgeReturns["setStopAuthority(address)void"];
      }
    > &
    Record<
      "setRebalancer(address)void" | "setRebalancer",
      {
        argsObj: BridgeArgs["obj"]["setRebalancer(address)void"];
        argsTuple: BridgeArgs["tuple"]["setRebalancer(address)void"];
        returns: BridgeReturns["setRebalancer(address)void"];
      }
    > &
    Record<
      "getGasUsage(byte)uint64" | "getGasUsage",
      {
        argsObj: BridgeArgs["obj"]["getGasUsage(byte)uint64"];
        argsTuple: BridgeArgs["tuple"]["getGasUsage(byte)uint64"];
        returns: BridgeReturns["getGasUsage(byte)uint64"];
      }
    > &
    Record<
      "setGasUsage(byte,uint64)void" | "setGasUsage",
      {
        argsObj: BridgeArgs["obj"]["setGasUsage(byte,uint64)void"];
        argsTuple: BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"];
        returns: BridgeReturns["setGasUsage(byte,uint64)void"];
      }
    > &
    Record<
      "setGasOracle(application)void" | "setGasOracle",
      {
        argsObj: BridgeArgs["obj"]["setGasOracle(application)void"];
        argsTuple: BridgeArgs["tuple"]["setGasOracle(application)void"];
        returns: BridgeReturns["setGasOracle(application)void"];
      }
    > &
    Record<
      "getTransactionRelayerCost(byte)uint64" | "getTransactionRelayerCost",
      {
        argsObj: BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"];
        argsTuple: BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"];
        returns: BridgeReturns["getTransactionRelayerCost(byte)uint64"];
      }
    > &
    Record<
      "transferOwnership(address)void" | "transferOwnership",
      {
        argsObj: BridgeArgs["obj"]["transferOwnership(address)void"];
        argsTuple: BridgeArgs["tuple"]["transferOwnership(address)void"];
        returns: BridgeReturns["transferOwnership(address)void"];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        chainId: number;
        messenger: bigint;
        stopAuthority: string;
        rebalancer: string;
        canSwap: bigint;
        gasOracle: bigint;
        owner: string;
      };
      maps: {};
    };
    box: {
      keys: {};
      maps: {
        processedMessages: Map<Uint8Array, Uint8Array>;
        sentMessages: Map<Uint8Array, Uint8Array>;
        otherBridges: Map<number, Uint8Array>;
        otherBridgeTokens: Map<Uint8Array | string, Uint8Array>;
        pools: Map<bigint | number, bigint>;
        fromGasOracleScalingFactor: Map<bigint | number, bigint>;
        bridgingFeeConversionScalingFactor: Map<bigint | number, bigint>;
        gasUsage: Map<number, bigint>;
      };
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type BridgeSignatures = keyof BridgeTypes["methods"];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BridgeNonVoidMethodSignatures = keyof BridgeTypes["methods"] extends infer T
  ? T extends keyof BridgeTypes["methods"]
    ? MethodReturn<T> extends void
      ? never
      : T
    : never
  : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, "method" | "args" | "onComplete"> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BridgeSignatures> = BridgeTypes["methods"][TSignature][
  | "argsObj"
  | "argsTuple"];
/**
 * Maps a method signature from the Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BridgeSignatures> = BridgeTypes["methods"][TSignature]["returns"];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BridgeTypes["state"]["global"]["keys"];

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BridgeTypes["state"]["box"]["keys"];

/**
 * Defines supported create method params for this smart contract
 */
export type BridgeCreateCallParams =
  | Expand<
      CallParams<
        | BridgeArgs["obj"]["createApplication(address,byte,application,application)void"]
        | BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"]
      > & { method: "createApplication" } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >
  | Expand<
      CallParams<
        | BridgeArgs["obj"]["createApplication(address,byte,application,application)void"]
        | BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"]
      > & { method: "createApplication(address,byte,application,application)void" } & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } & CreateSchema
    >;
/**
 * Defines arguments required for the deploy method.
 */
export type BridgeDeployParams = Expand<
  Omit<AppFactoryDeployParams, "createParams" | "updateParams" | "deleteParams"> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: BridgeCreateCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Bridge smart contract
 */
export abstract class BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BridgeCreateCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case "createApplication":
          case "createApplication(address,byte,application,application)void":
            return BridgeParamsFactory.create.createApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs create ABI call params for the Bridge smart contract using the createApplication(address,byte,application,application)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | BridgeArgs["obj"]["createApplication(address,byte,application,application)void"]
          | BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"]
        > &
          AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ): AppClientMethodCallParams & AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC } {
        return {
          ...params,
          method: "createApplication(address,byte,application,application)void" as const,
          args: Array.isArray(params.args)
            ? params.args
            : [params.args.owner, params.args.chainId, params.args.messenger, params.args.gasOracle],
        };
      },
    };
  }

  /**
   * Constructs a no op call for the optInAsset(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInAsset(
    params: CallParams<BridgeArgs["obj"]["optInAsset(uint64)void"] | BridgeArgs["tuple"]["optInAsset(uint64)void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "optInAsset(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    };
  }
  /**
   * Constructs a no op call for the noop()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noop(
    params: CallParams<BridgeArgs["obj"]["noop()void"] | BridgeArgs["tuple"]["noop()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "noop()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swapAndBridge(
    params: CallParams<
      | BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      | BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.tokenId,
            params.args.recipient,
            params.args.destinationChainId,
            params.args.receiveToken,
            params.args.nonce,
            params.args.feeTokenAmount,
          ],
    };
  }
  /**
   * Constructs a no op call for the receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static receiveTokens(
    params: CallParams<
      | BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      | BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.amount,
            params.args.recipient,
            params.args.sourceChainId,
            params.args.receiveToken,
            params.args.nonce,
            params.args.receiveAmountMin,
          ],
    };
  }
  /**
   * Constructs a no op call for the registerBridge(byte,byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerBridge(
    params: CallParams<
      BridgeArgs["obj"]["registerBridge(byte,byte[32])void"] | BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "registerBridge(byte,byte[32])void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId, params.args.bridgeAddress],
    };
  }
  /**
   * Constructs a no op call for the addBridgeToken(byte,byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addBridgeToken(
    params: CallParams<
      BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"] | BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "addBridgeToken(byte,byte[32])void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId, params.args.tokenAddress],
    };
  }
  /**
   * Constructs a no op call for the removeBridgeToken(byte,byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeBridgeToken(
    params: CallParams<
      | BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"]
      | BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "removeBridgeToken(byte,byte[32])void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId, params.args.tokenAddress],
    };
  }
  /**
   * Constructs a no op call for the withdrawGasTokens(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawGasTokens(
    params: CallParams<
      BridgeArgs["obj"]["withdrawGasTokens(uint64)void"] | BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "withdrawGasTokens(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    };
  }
  /**
   * Constructs a no op call for the withdrawBridgingFeeInTokens(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawBridgingFeeInTokens(
    params: CallParams<
      | BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"]
      | BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "withdrawBridgingFeeInTokens(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    };
  }
  /**
   * Constructs a no op call for the getBridgingCostInTokens(byte,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBridgingCostInTokens(
    params: CallParams<
      | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
      | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getBridgingCostInTokens(byte,uint64)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.destinationChainId, params.args.tokenId],
    };
  }
  /**
   * Constructs a no op call for the hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hashMessage(
    params: CallParams<
      | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
      | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.amount,
            params.args.recipient,
            params.args.sourceChainId,
            params.args.destinationChainId,
            params.args.receiveToken,
            params.args.nonce,
          ],
    };
  }
  /**
   * Constructs a no op call for the isOtherBridgeTokenSupported(byte,byte[32])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isOtherBridgeTokenSupported(
    params: CallParams<
      | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
      | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "isOtherBridgeTokenSupported(byte,byte[32])bool" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId, params.args.token],
    };
  }
  /**
   * Constructs a no op call for the getTransactionCost(byte)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionCost(
    params: CallParams<
      BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getTransactionCost(byte)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId],
    };
  }
  /**
   * Constructs a no op call for the getReceiveTokensCost()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getReceiveTokensCost(
    params: CallParams<
      BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getReceiveTokensCost()uint64" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the getSendTransactionStorageCost()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSendTransactionStorageCost(
    params: CallParams<
      | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
      | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getSendTransactionStorageCost()uint64" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(
    params: CallParams<
      | BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"]
      | BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "swap(uint64,uint64,address,uint64)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.tokenId, params.args.receiveTokenId, params.args.recipient, params.args.receiveAmountMin],
    };
  }
  /**
   * Constructs a no op call for the addPool(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPool(
    params: CallParams<
      BridgeArgs["obj"]["addPool(uint64,uint64)void"] | BridgeArgs["tuple"]["addPool(uint64,uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "addPool(uint64,uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.tokenId],
    };
  }
  /**
   * Constructs a no op call for the removePool(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removePool(
    params: CallParams<BridgeArgs["obj"]["removePool(uint64)void"] | BridgeArgs["tuple"]["removePool(uint64)void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "removePool(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    };
  }
  /**
   * Constructs a no op call for the stopSwap()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stopSwap(
    params: CallParams<BridgeArgs["obj"]["stopSwap()void"] | BridgeArgs["tuple"]["stopSwap()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "stopSwap()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the startSwap()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startSwap(
    params: CallParams<BridgeArgs["obj"]["startSwap()void"] | BridgeArgs["tuple"]["startSwap()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "startSwap()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the setStopAuthority(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setStopAuthority(
    params: CallParams<
      BridgeArgs["obj"]["setStopAuthority(address)void"] | BridgeArgs["tuple"]["setStopAuthority(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setStopAuthority(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stopAuthority],
    };
  }
  /**
   * Constructs a no op call for the setRebalancer(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setRebalancer(
    params: CallParams<
      BridgeArgs["obj"]["setRebalancer(address)void"] | BridgeArgs["tuple"]["setRebalancer(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setRebalancer(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rebalancer],
    };
  }
  /**
   * Constructs a no op call for the getGasUsage(byte)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGasUsage(
    params: CallParams<BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getGasUsage(byte)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId],
    };
  }
  /**
   * Constructs a no op call for the setGasUsage(byte,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGasUsage(
    params: CallParams<
      BridgeArgs["obj"]["setGasUsage(byte,uint64)void"] | BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setGasUsage(byte,uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId, params.args.gasAmount],
    };
  }
  /**
   * Constructs a no op call for the setGasOracle(application)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGasOracle(
    params: CallParams<
      BridgeArgs["obj"]["setGasOracle(application)void"] | BridgeArgs["tuple"]["setGasOracle(application)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setGasOracle(application)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gasOracle],
    };
  }
  /**
   * Constructs a no op call for the getTransactionRelayerCost(byte)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionRelayerCost(
    params: CallParams<
      | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
      | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getTransactionRelayerCost(byte)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.chainId],
    };
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferOwnership(
    params: CallParams<
      BridgeArgs["obj"]["transferOwnership(address)void"] | BridgeArgs["tuple"]["transferOwnership(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "transferOwnership(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, "appSpec">) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BridgeClient(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {
    return new BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params));
  }

  /**
   * Idempotently deploys the Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? BridgeParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
          ? (params.createParams as BridgeCreateCallParams & { args: Uint8Array[] })
          : undefined,
    });
    return { result: result.result, appClient: new BridgeClient(result.appClient) };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bridge smart contract using the createApplication(address,byte,application,application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | BridgeArgs["obj"]["createApplication(address,byte,application,application)void"]
          | BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.params.create(BridgeParamsFactory.create.createApplication(params));
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bridge smart contract using the createApplication(address,byte,application,application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | BridgeArgs["obj"]["createApplication(address,byte,application,application)void"]
          | BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.createTransaction.create(BridgeParamsFactory.create.createApplication(params));
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bridge smart contract using an ABI method call using the createApplication(address,byte,application,application)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | BridgeArgs["obj"]["createApplication(address,byte,application,application)void"]
          | BridgeArgs["tuple"]["createApplication(address,byte,application,application)void"]
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        const result = await this.appFactory.send.create(BridgeParamsFactory.create.createApplication(params));
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as
              | undefined
              | BridgeReturns["createApplication(address,byte,application,application)void"],
          },
          appClient: new BridgeClient(result.appClient),
        };
      },
    },
  };
}
/**
 * A client to make calls to the Bridge smart contract
 */
export class BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Bridge app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, "appSpec">);
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, "appSpec">) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BridgeNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, "appSpec">
  ): Promise<BridgeClient> {
    return new BridgeClient(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }));
  }

  /**
   * Returns an `BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, "appSpec">): Promise<BridgeClient> {
    return new BridgeClient(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }));
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the Bridge smart contract using the `optInAsset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInAsset: (
      params: CallParams<
        BridgeArgs["obj"]["optInAsset(uint64)void"] | BridgeArgs["tuple"]["optInAsset(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.optInAsset(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noop: (
      params: CallParams<BridgeArgs["obj"]["noop()void"] | BridgeArgs["tuple"]["noop()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.noop(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swapAndBridge: (
      params: CallParams<
        | BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        | BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.swapAndBridge(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    receiveTokens: (
      params: CallParams<
        | BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        | BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.receiveTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `registerBridge(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerBridge: (
      params: CallParams<
        | BridgeArgs["obj"]["registerBridge(byte,byte[32])void"]
        | BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.registerBridge(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `addBridgeToken(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addBridgeToken: (
      params: CallParams<
        | BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"]
        | BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.addBridgeToken(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `removeBridgeToken(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeBridgeToken: (
      params: CallParams<
        | BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"]
        | BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.removeBridgeToken(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `withdrawGasTokens(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawGasTokens: (
      params: CallParams<
        BridgeArgs["obj"]["withdrawGasTokens(uint64)void"] | BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.withdrawGasTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `withdrawBridgingFeeInTokens(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawBridgingFeeInTokens: (
      params: CallParams<
        | BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"]
        | BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.withdrawBridgingFeeInTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getBridgingCostInTokens(byte,uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBridgingCostInTokens: (
      params: CallParams<
        | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
        | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.getBridgingCostInTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hashMessage: (
      params: CallParams<
        | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
        | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.hashMessage(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `isOtherBridgeTokenSupported(byte,byte[32])bool` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isOtherBridgeTokenSupported: (
      params: CallParams<
        | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
        | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.isOtherBridgeTokenSupported(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getTransactionCost(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionCost: (
      params: CallParams<
        BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.getTransactionCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getReceiveTokensCost()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getReceiveTokensCost: (
      params: CallParams<
        BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.getReceiveTokensCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getSendTransactionStorageCost()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSendTransactionStorageCost: (
      params: CallParams<
        | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
        | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.getSendTransactionStorageCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `swap(uint64,uint64,address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (
      params: CallParams<
        | BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"]
        | BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.swap(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `addPool(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addPool: (
      params: CallParams<
        BridgeArgs["obj"]["addPool(uint64,uint64)void"] | BridgeArgs["tuple"]["addPool(uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.addPool(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `removePool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removePool: (
      params: CallParams<
        BridgeArgs["obj"]["removePool(uint64)void"] | BridgeArgs["tuple"]["removePool(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.removePool(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `stopSwap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stopSwap: (
      params: CallParams<BridgeArgs["obj"]["stopSwap()void"] | BridgeArgs["tuple"]["stopSwap()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.stopSwap(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `startSwap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startSwap: (
      params: CallParams<BridgeArgs["obj"]["startSwap()void"] | BridgeArgs["tuple"]["startSwap()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.startSwap(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setStopAuthority(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setStopAuthority: (
      params: CallParams<
        BridgeArgs["obj"]["setStopAuthority(address)void"] | BridgeArgs["tuple"]["setStopAuthority(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.setStopAuthority(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setRebalancer(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setRebalancer: (
      params: CallParams<
        BridgeArgs["obj"]["setRebalancer(address)void"] | BridgeArgs["tuple"]["setRebalancer(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.setRebalancer(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getGasUsage(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGasUsage: (
      params: CallParams<
        BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.getGasUsage(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setGasUsage(byte,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGasUsage: (
      params: CallParams<
        BridgeArgs["obj"]["setGasUsage(byte,uint64)void"] | BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.setGasUsage(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setGasOracle(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGasOracle: (
      params: CallParams<
        BridgeArgs["obj"]["setGasOracle(application)void"] | BridgeArgs["tuple"]["setGasOracle(application)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.setGasOracle(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getTransactionRelayerCost(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionRelayerCost: (
      params: CallParams<
        | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
        | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.getTransactionRelayerCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `transferOwnership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferOwnership: (
      params: CallParams<
        BridgeArgs["obj"]["transferOwnership(address)void"] | BridgeArgs["tuple"]["transferOwnership(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BridgeParamsFactory.transferOwnership(params));
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the Bridge smart contract using the `optInAsset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInAsset: (
      params: CallParams<
        BridgeArgs["obj"]["optInAsset(uint64)void"] | BridgeArgs["tuple"]["optInAsset(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.optInAsset(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noop: (
      params: CallParams<BridgeArgs["obj"]["noop()void"] | BridgeArgs["tuple"]["noop()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.noop(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swapAndBridge: (
      params: CallParams<
        | BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        | BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.swapAndBridge(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    receiveTokens: (
      params: CallParams<
        | BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        | BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.receiveTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `registerBridge(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerBridge: (
      params: CallParams<
        | BridgeArgs["obj"]["registerBridge(byte,byte[32])void"]
        | BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.registerBridge(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `addBridgeToken(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addBridgeToken: (
      params: CallParams<
        | BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"]
        | BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.addBridgeToken(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `removeBridgeToken(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeBridgeToken: (
      params: CallParams<
        | BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"]
        | BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.removeBridgeToken(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `withdrawGasTokens(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawGasTokens: (
      params: CallParams<
        BridgeArgs["obj"]["withdrawGasTokens(uint64)void"] | BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.withdrawGasTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `withdrawBridgingFeeInTokens(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawBridgingFeeInTokens: (
      params: CallParams<
        | BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"]
        | BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.withdrawBridgingFeeInTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getBridgingCostInTokens(byte,uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBridgingCostInTokens: (
      params: CallParams<
        | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
        | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.getBridgingCostInTokens(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hashMessage: (
      params: CallParams<
        | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
        | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.hashMessage(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `isOtherBridgeTokenSupported(byte,byte[32])bool` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isOtherBridgeTokenSupported: (
      params: CallParams<
        | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
        | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.isOtherBridgeTokenSupported(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getTransactionCost(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionCost: (
      params: CallParams<
        BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.getTransactionCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getReceiveTokensCost()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getReceiveTokensCost: (
      params: CallParams<
        BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.getReceiveTokensCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getSendTransactionStorageCost()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSendTransactionStorageCost: (
      params: CallParams<
        | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
        | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.getSendTransactionStorageCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `swap(uint64,uint64,address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (
      params: CallParams<
        | BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"]
        | BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.swap(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `addPool(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addPool: (
      params: CallParams<
        BridgeArgs["obj"]["addPool(uint64,uint64)void"] | BridgeArgs["tuple"]["addPool(uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.addPool(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `removePool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removePool: (
      params: CallParams<
        BridgeArgs["obj"]["removePool(uint64)void"] | BridgeArgs["tuple"]["removePool(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.removePool(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `stopSwap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stopSwap: (
      params: CallParams<BridgeArgs["obj"]["stopSwap()void"] | BridgeArgs["tuple"]["stopSwap()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.stopSwap(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `startSwap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startSwap: (
      params: CallParams<BridgeArgs["obj"]["startSwap()void"] | BridgeArgs["tuple"]["startSwap()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.startSwap(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setStopAuthority(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setStopAuthority: (
      params: CallParams<
        BridgeArgs["obj"]["setStopAuthority(address)void"] | BridgeArgs["tuple"]["setStopAuthority(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.setStopAuthority(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setRebalancer(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setRebalancer: (
      params: CallParams<
        BridgeArgs["obj"]["setRebalancer(address)void"] | BridgeArgs["tuple"]["setRebalancer(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.setRebalancer(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getGasUsage(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGasUsage: (
      params: CallParams<
        BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.getGasUsage(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setGasUsage(byte,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGasUsage: (
      params: CallParams<
        BridgeArgs["obj"]["setGasUsage(byte,uint64)void"] | BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.setGasUsage(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `setGasOracle(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGasOracle: (
      params: CallParams<
        BridgeArgs["obj"]["setGasOracle(application)void"] | BridgeArgs["tuple"]["setGasOracle(application)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.setGasOracle(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `getTransactionRelayerCost(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionRelayerCost: (
      params: CallParams<
        | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
        | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.getTransactionRelayerCost(params));
    },

    /**
     * Makes a call to the Bridge smart contract using the `transferOwnership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferOwnership: (
      params: CallParams<
        BridgeArgs["obj"]["transferOwnership(address)void"] | BridgeArgs["tuple"]["transferOwnership(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BridgeParamsFactory.transferOwnership(params));
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the Bridge smart contract using the `optInAsset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInAsset: async (
      params: CallParams<BridgeArgs["obj"]["optInAsset(uint64)void"] | BridgeArgs["tuple"]["optInAsset(uint64)void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.optInAsset(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["optInAsset(uint64)void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noop: async (
      params: CallParams<BridgeArgs["obj"]["noop()void"] | BridgeArgs["tuple"]["noop()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.noop(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["noop()void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swapAndBridge: async (
      params: CallParams<
        | BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        | BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.swapAndBridge(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BridgeReturns["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    receiveTokens: async (
      params: CallParams<
        | BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        | BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.receiveTokens(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BridgeReturns["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `registerBridge(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerBridge: async (
      params: CallParams<
        | BridgeArgs["obj"]["registerBridge(byte,byte[32])void"]
        | BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.registerBridge(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["registerBridge(byte,byte[32])void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `addBridgeToken(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addBridgeToken: async (
      params: CallParams<
        | BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"]
        | BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.addBridgeToken(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["addBridgeToken(byte,byte[32])void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `removeBridgeToken(byte,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeBridgeToken: async (
      params: CallParams<
        | BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"]
        | BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.removeBridgeToken(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["removeBridgeToken(byte,byte[32])void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `withdrawGasTokens(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawGasTokens: async (
      params: CallParams<
        BridgeArgs["obj"]["withdrawGasTokens(uint64)void"] | BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.withdrawGasTokens(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["withdrawGasTokens(uint64)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `withdrawBridgingFeeInTokens(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawBridgingFeeInTokens: async (
      params: CallParams<
        | BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"]
        | BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.withdrawBridgingFeeInTokens(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["withdrawBridgingFeeInTokens(uint64)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `getBridgingCostInTokens(byte,uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBridgingCostInTokens: async (
      params: CallParams<
        | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
        | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.getBridgingCostInTokens(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["getBridgingCostInTokens(byte,uint64)uint64"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hashMessage: async (
      params: CallParams<
        | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
        | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.hashMessage(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BridgeReturns["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `isOtherBridgeTokenSupported(byte,byte[32])bool` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isOtherBridgeTokenSupported: async (
      params: CallParams<
        | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
        | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.isOtherBridgeTokenSupported(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["isOtherBridgeTokenSupported(byte,byte[32])bool"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `getTransactionCost(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionCost: async (
      params: CallParams<
        BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.getTransactionCost(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["getTransactionCost(byte)uint64"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `getReceiveTokensCost()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getReceiveTokensCost: async (
      params: CallParams<
        BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.getReceiveTokensCost(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["getReceiveTokensCost()uint64"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `getSendTransactionStorageCost()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSendTransactionStorageCost: async (
      params: CallParams<
        | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
        | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.getSendTransactionStorageCost(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["getSendTransactionStorageCost()uint64"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `swap(uint64,uint64,address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (
      params: CallParams<
        | BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"]
        | BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.swap(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["swap(uint64,uint64,address,uint64)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `addPool(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addPool: async (
      params: CallParams<
        BridgeArgs["obj"]["addPool(uint64,uint64)void"] | BridgeArgs["tuple"]["addPool(uint64,uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.addPool(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["addPool(uint64,uint64)void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `removePool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removePool: async (
      params: CallParams<BridgeArgs["obj"]["removePool(uint64)void"] | BridgeArgs["tuple"]["removePool(uint64)void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.removePool(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["removePool(uint64)void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `stopSwap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stopSwap: async (
      params: CallParams<BridgeArgs["obj"]["stopSwap()void"] | BridgeArgs["tuple"]["stopSwap()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.stopSwap(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["stopSwap()void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `startSwap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startSwap: async (
      params: CallParams<BridgeArgs["obj"]["startSwap()void"] | BridgeArgs["tuple"]["startSwap()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.startSwap(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["startSwap()void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `setStopAuthority(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setStopAuthority: async (
      params: CallParams<
        BridgeArgs["obj"]["setStopAuthority(address)void"] | BridgeArgs["tuple"]["setStopAuthority(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.setStopAuthority(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["setStopAuthority(address)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `setRebalancer(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setRebalancer: async (
      params: CallParams<
        BridgeArgs["obj"]["setRebalancer(address)void"] | BridgeArgs["tuple"]["setRebalancer(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.setRebalancer(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["setRebalancer(address)void"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `getGasUsage(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGasUsage: async (
      params: CallParams<
        BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.getGasUsage(params));
      return { ...result, return: result.return as unknown as undefined | BridgeReturns["getGasUsage(byte)uint64"] };
    },

    /**
     * Makes a call to the Bridge smart contract using the `setGasUsage(byte,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGasUsage: async (
      params: CallParams<
        BridgeArgs["obj"]["setGasUsage(byte,uint64)void"] | BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.setGasUsage(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["setGasUsage(byte,uint64)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `setGasOracle(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGasOracle: async (
      params: CallParams<
        BridgeArgs["obj"]["setGasOracle(application)void"] | BridgeArgs["tuple"]["setGasOracle(application)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.setGasOracle(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["setGasOracle(application)void"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `getTransactionRelayerCost(byte)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionRelayerCost: async (
      params: CallParams<
        | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
        | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.getTransactionRelayerCost(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["getTransactionRelayerCost(byte)uint64"],
      };
    },

    /**
     * Makes a call to the Bridge smart contract using the `transferOwnership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferOwnership: async (
      params: CallParams<
        BridgeArgs["obj"]["transferOwnership(address)void"] | BridgeArgs["tuple"]["transferOwnership(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BridgeParamsFactory.transferOwnership(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BridgeReturns["transferOwnership(address)void"],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BridgeClient(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `getBridgingCostInTokens(byte,uint64)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getBridgingCostInTokens(
    params: CallParams<
      | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
      | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
    >
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.getBridgingCostInTokens(params));
    return result.return as unknown as BridgeReturns["getBridgingCostInTokens(byte,uint64)uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async hashMessage(
    params: CallParams<
      | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
      | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
    >
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.hashMessage(params));
    return result.return as unknown as BridgeReturns["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `isOtherBridgeTokenSupported(byte,byte[32])bool` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isOtherBridgeTokenSupported(
    params: CallParams<
      | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
      | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
    >
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.isOtherBridgeTokenSupported(params));
    return result.return as unknown as BridgeReturns["isOtherBridgeTokenSupported(byte,byte[32])bool"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `getTransactionCost(byte)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTransactionCost(
    params: CallParams<
      BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
    >
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.getTransactionCost(params));
    return result.return as unknown as BridgeReturns["getTransactionCost(byte)uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `getReceiveTokensCost()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getReceiveTokensCost(
    params: CallParams<
      BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.getReceiveTokensCost(params));
    return result.return as unknown as BridgeReturns["getReceiveTokensCost()uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `getSendTransactionStorageCost()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getSendTransactionStorageCost(
    params: CallParams<
      | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
      | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.getSendTransactionStorageCost(params));
    return result.return as unknown as BridgeReturns["getSendTransactionStorageCost()uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `getGasUsage(byte)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGasUsage(
    params: CallParams<BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]>
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.getGasUsage(params));
    return result.return as unknown as BridgeReturns["getGasUsage(byte)uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Bridge smart contract using the `getTransactionRelayerCost(byte)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTransactionRelayerCost(
    params: CallParams<
      | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
      | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
    >
  ) {
    const result = await this.appClient.send.call(BridgeParamsFactory.getTransactionRelayerCost(params));
    return result.return as unknown as BridgeReturns["getTransactionRelayerCost(byte)uint64"];
  }

  /**
   * Methods to access state for the current Bridge app
   */
  state = {
    /**
     * Methods to access global state for the current Bridge app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          chainId: result.chainId,
          messenger: result.messenger,
          stopAuthority: result.stopAuthority,
          rebalancer: result.rebalancer,
          canSwap: result.canSwap,
          gasOracle: result.gasOracle,
          owner: result.owner,
        };
      },
      /**
       * Get the current value of the chainId key in global state
       */
      chainId: async (): Promise<number | undefined> => {
        return (await this.appClient.state.global.getValue("chainId")) as number | undefined;
      },
      /**
       * Get the current value of the messenger key in global state
       */
      messenger: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("messenger")) as bigint | undefined;
      },
      /**
       * Get the current value of the stopAuthority key in global state
       */
      stopAuthority: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("stopAuthority")) as string | undefined;
      },
      /**
       * Get the current value of the rebalancer key in global state
       */
      rebalancer: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("rebalancer")) as string | undefined;
      },
      /**
       * Get the current value of the canSwap key in global state
       */
      canSwap: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("canSwap")) as bigint | undefined;
      },
      /**
       * Get the current value of the gasOracle key in global state
       */
      gasOracle: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("gasOracle")) as bigint | undefined;
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("owner")) as string | undefined;
      },
    },
    /**
     * Methods to access box state for the current Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll();
        return {};
      },
      /**
       * Get values from the processedMessages map in box state
       */
      processedMessages: {
        /**
         * Get all current values of the processedMessages map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => {
          return (await this.appClient.state.box.getMap("processedMessages")) as Map<Uint8Array, Uint8Array>;
        },
        /**
         * Get a current value of the processedMessages map by key from box state
         */
        value: async (key: Uint8Array): Promise<Uint8Array | undefined> => {
          return (await this.appClient.state.box.getMapValue("processedMessages", key)) as Uint8Array | undefined;
        },
      },
      /**
       * Get values from the sentMessages map in box state
       */
      sentMessages: {
        /**
         * Get all current values of the sentMessages map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => {
          return (await this.appClient.state.box.getMap("sentMessages")) as Map<Uint8Array, Uint8Array>;
        },
        /**
         * Get a current value of the sentMessages map by key from box state
         */
        value: async (key: Uint8Array): Promise<Uint8Array | undefined> => {
          return (await this.appClient.state.box.getMapValue("sentMessages", key)) as Uint8Array | undefined;
        },
      },
      /**
       * Get values from the otherBridges map in box state
       */
      otherBridges: {
        /**
         * Get all current values of the otherBridges map in box state
         */
        getMap: async (): Promise<Map<number, Uint8Array>> => {
          return (await this.appClient.state.box.getMap("otherBridges")) as Map<number, Uint8Array>;
        },
        /**
         * Get a current value of the otherBridges map by key from box state
         */
        value: async (key: number): Promise<Uint8Array | undefined> => {
          return (await this.appClient.state.box.getMapValue("otherBridges", key)) as Uint8Array | undefined;
        },
      },
      /**
       * Get values from the otherBridgeTokens map in box state
       */
      otherBridgeTokens: {
        /**
         * Get all current values of the otherBridgeTokens map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => {
          return (await this.appClient.state.box.getMap("otherBridgeTokens")) as Map<Uint8Array, Uint8Array>;
        },
        /**
         * Get a current value of the otherBridgeTokens map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Uint8Array | undefined> => {
          return (await this.appClient.state.box.getMapValue("otherBridgeTokens", key)) as Uint8Array | undefined;
        },
      },
      /**
       * Get values from the pools map in box state
       */
      pools: {
        /**
         * Get all current values of the pools map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => {
          return (await this.appClient.state.box.getMap("pools")) as Map<bigint, bigint>;
        },
        /**
         * Get a current value of the pools map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => {
          return (await this.appClient.state.box.getMapValue("pools", key)) as bigint | undefined;
        },
      },
      /**
       * Get values from the fromGasOracleScalingFactor map in box state
       */
      fromGasOracleScalingFactor: {
        /**
         * Get all current values of the fromGasOracleScalingFactor map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => {
          return (await this.appClient.state.box.getMap("fromGasOracleScalingFactor")) as Map<bigint, bigint>;
        },
        /**
         * Get a current value of the fromGasOracleScalingFactor map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => {
          return (await this.appClient.state.box.getMapValue("fromGasOracleScalingFactor", key)) as bigint | undefined;
        },
      },
      /**
       * Get values from the bridgingFeeConversionScalingFactor map in box state
       */
      bridgingFeeConversionScalingFactor: {
        /**
         * Get all current values of the bridgingFeeConversionScalingFactor map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => {
          return (await this.appClient.state.box.getMap("bridgingFeeConversionScalingFactor")) as Map<bigint, bigint>;
        },
        /**
         * Get a current value of the bridgingFeeConversionScalingFactor map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => {
          return (await this.appClient.state.box.getMapValue("bridgingFeeConversionScalingFactor", key)) as
            | bigint
            | undefined;
        },
      },
      /**
       * Get values from the gasUsage map in box state
       */
      gasUsage: {
        /**
         * Get all current values of the gasUsage map in box state
         */
        getMap: async (): Promise<Map<number, bigint>> => {
          return (await this.appClient.state.box.getMap("gasUsage")) as Map<number, bigint>;
        },
        /**
         * Get a current value of the gasUsage map by key from box state
         */
        value: async (key: number): Promise<bigint | undefined> => {
          return (await this.appClient.state.box.getMapValue("gasUsage", key)) as bigint | undefined;
        },
      },
    },
  };

  public newGroup(): BridgeComposer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = [];
    return {
      /**
       * Add a optInAsset(uint64)void method call against the Bridge contract
       */
      optInAsset(
        params: CallParams<
          BridgeArgs["obj"]["optInAsset(uint64)void"] | BridgeArgs["tuple"]["optInAsset(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.optInAsset(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a noop()void method call against the Bridge contract
       */
      noop(
        params: CallParams<BridgeArgs["obj"]["noop()void"] | BridgeArgs["tuple"]["noop()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noop(params)));
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void method call against the Bridge contract
       */
      swapAndBridge(
        params: CallParams<
          | BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
          | BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.swapAndBridge(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void method call against the Bridge contract
       */
      receiveTokens(
        params: CallParams<
          | BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
          | BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.receiveTokens(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a registerBridge(byte,byte[32])void method call against the Bridge contract
       */
      registerBridge(
        params: CallParams<
          | BridgeArgs["obj"]["registerBridge(byte,byte[32])void"]
          | BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.registerBridge(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a addBridgeToken(byte,byte[32])void method call against the Bridge contract
       */
      addBridgeToken(
        params: CallParams<
          | BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"]
          | BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.addBridgeToken(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a removeBridgeToken(byte,byte[32])void method call against the Bridge contract
       */
      removeBridgeToken(
        params: CallParams<
          | BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"]
          | BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.removeBridgeToken(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a withdrawGasTokens(uint64)void method call against the Bridge contract
       */
      withdrawGasTokens(
        params: CallParams<
          BridgeArgs["obj"]["withdrawGasTokens(uint64)void"] | BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.withdrawGasTokens(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a withdrawBridgingFeeInTokens(uint64)void method call against the Bridge contract
       */
      withdrawBridgingFeeInTokens(
        params: CallParams<
          | BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"]
          | BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.withdrawBridgingFeeInTokens(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a getBridgingCostInTokens(byte,uint64)uint64 method call against the Bridge contract
       */
      getBridgingCostInTokens(
        params: CallParams<
          | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
          | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getBridgingCostInTokens(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("getBridgingCostInTokens(byte,uint64)uint64", v));
        return this;
      },
      /**
       * Add a hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32] method call against the Bridge contract
       */
      hashMessage(
        params: CallParams<
          | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
          | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.hashMessage(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]", v)
        );
        return this;
      },
      /**
       * Add a isOtherBridgeTokenSupported(byte,byte[32])bool method call against the Bridge contract
       */
      isOtherBridgeTokenSupported(
        params: CallParams<
          | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
          | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.isOtherBridgeTokenSupported(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("isOtherBridgeTokenSupported(byte,byte[32])bool", v));
        return this;
      },
      /**
       * Add a getTransactionCost(byte)uint64 method call against the Bridge contract
       */
      getTransactionCost(
        params: CallParams<
          BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getTransactionCost(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("getTransactionCost(byte)uint64", v));
        return this;
      },
      /**
       * Add a getReceiveTokensCost()uint64 method call against the Bridge contract
       */
      getReceiveTokensCost(
        params: CallParams<
          BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getReceiveTokensCost(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("getReceiveTokensCost()uint64", v));
        return this;
      },
      /**
       * Add a getSendTransactionStorageCost()uint64 method call against the Bridge contract
       */
      getSendTransactionStorageCost(
        params: CallParams<
          | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
          | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getSendTransactionStorageCost(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("getSendTransactionStorageCost()uint64", v));
        return this;
      },
      /**
       * Add a swap(uint64,uint64,address,uint64)void method call against the Bridge contract
       */
      swap(
        params: CallParams<
          | BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"]
          | BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)));
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a addPool(uint64,uint64)void method call against the Bridge contract
       */
      addPool(
        params: CallParams<
          BridgeArgs["obj"]["addPool(uint64,uint64)void"] | BridgeArgs["tuple"]["addPool(uint64,uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.addPool(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a removePool(uint64)void method call against the Bridge contract
       */
      removePool(
        params: CallParams<
          BridgeArgs["obj"]["removePool(uint64)void"] | BridgeArgs["tuple"]["removePool(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.removePool(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a stopSwap()void method call against the Bridge contract
       */
      stopSwap(
        params: CallParams<BridgeArgs["obj"]["stopSwap()void"] | BridgeArgs["tuple"]["stopSwap()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.stopSwap(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a startSwap()void method call against the Bridge contract
       */
      startSwap(
        params: CallParams<BridgeArgs["obj"]["startSwap()void"] | BridgeArgs["tuple"]["startSwap()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.startSwap(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setStopAuthority(address)void method call against the Bridge contract
       */
      setStopAuthority(
        params: CallParams<
          BridgeArgs["obj"]["setStopAuthority(address)void"] | BridgeArgs["tuple"]["setStopAuthority(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setStopAuthority(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setRebalancer(address)void method call against the Bridge contract
       */
      setRebalancer(
        params: CallParams<
          BridgeArgs["obj"]["setRebalancer(address)void"] | BridgeArgs["tuple"]["setRebalancer(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setRebalancer(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a getGasUsage(byte)uint64 method call against the Bridge contract
       */
      getGasUsage(
        params: CallParams<
          BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getGasUsage(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("getGasUsage(byte)uint64", v));
        return this;
      },
      /**
       * Add a setGasUsage(byte,uint64)void method call against the Bridge contract
       */
      setGasUsage(
        params: CallParams<
          BridgeArgs["obj"]["setGasUsage(byte,uint64)void"] | BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setGasUsage(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setGasOracle(application)void method call against the Bridge contract
       */
      setGasOracle(
        params: CallParams<
          BridgeArgs["obj"]["setGasOracle(application)void"] | BridgeArgs["tuple"]["setGasOracle(application)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setGasOracle(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a getTransactionRelayerCost(byte)uint64 method call against the Bridge contract
       */
      getTransactionRelayerCost(
        params: CallParams<
          | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
          | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getTransactionRelayerCost(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("getTransactionRelayerCost(byte)uint64", v));
        return this;
      },
      /**
       * Add a transferOwnership(address)void method call against the Bridge contract
       */
      transferOwnership(
        params: CallParams<
          BridgeArgs["obj"]["transferOwnership(address)void"] | BridgeArgs["tuple"]["transferOwnership(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.transferOwnership(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a clear state call to the Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)));
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer));
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options ? composer.simulate() : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
    } as unknown as BridgeComposer;
  }
}
export type BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInAsset(
    params?: CallParams<BridgeArgs["obj"]["optInAsset(uint64)void"] | BridgeArgs["tuple"]["optInAsset(uint64)void"]>
  ): BridgeComposer<[...TReturns, BridgeReturns["optInAsset(uint64)void"] | undefined]>;

  /**
   * Calls the noop()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(
    params?: CallParams<BridgeArgs["obj"]["noop()void"] | BridgeArgs["tuple"]["noop()void"]>
  ): BridgeComposer<[...TReturns, BridgeReturns["noop()void"] | undefined]>;

  /**
   * Calls the swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapAndBridge(
    params?: CallParams<
      | BridgeArgs["obj"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      | BridgeArgs["tuple"]["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
    >
  ): BridgeComposer<
    [...TReturns, BridgeReturns["swapAndBridge(uint64,byte[32],byte,byte[32],byte[32],uint64)void"] | undefined]
  >;

  /**
   * Calls the receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receiveTokens(
    params?: CallParams<
      | BridgeArgs["obj"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
      | BridgeArgs["tuple"]["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"]
    >
  ): BridgeComposer<
    [...TReturns, BridgeReturns["receiveTokens(uint64,byte[32],byte,byte[32],byte[32],uint64)void"] | undefined]
  >;

  /**
   * Calls the registerBridge(byte,byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerBridge(
    params?: CallParams<
      BridgeArgs["obj"]["registerBridge(byte,byte[32])void"] | BridgeArgs["tuple"]["registerBridge(byte,byte[32])void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["registerBridge(byte,byte[32])void"] | undefined]>;

  /**
   * Calls the addBridgeToken(byte,byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addBridgeToken(
    params?: CallParams<
      BridgeArgs["obj"]["addBridgeToken(byte,byte[32])void"] | BridgeArgs["tuple"]["addBridgeToken(byte,byte[32])void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["addBridgeToken(byte,byte[32])void"] | undefined]>;

  /**
   * Calls the removeBridgeToken(byte,byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeBridgeToken(
    params?: CallParams<
      | BridgeArgs["obj"]["removeBridgeToken(byte,byte[32])void"]
      | BridgeArgs["tuple"]["removeBridgeToken(byte,byte[32])void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["removeBridgeToken(byte,byte[32])void"] | undefined]>;

  /**
   * Calls the withdrawGasTokens(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawGasTokens(
    params?: CallParams<
      BridgeArgs["obj"]["withdrawGasTokens(uint64)void"] | BridgeArgs["tuple"]["withdrawGasTokens(uint64)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["withdrawGasTokens(uint64)void"] | undefined]>;

  /**
   * Calls the withdrawBridgingFeeInTokens(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawBridgingFeeInTokens(
    params?: CallParams<
      | BridgeArgs["obj"]["withdrawBridgingFeeInTokens(uint64)void"]
      | BridgeArgs["tuple"]["withdrawBridgingFeeInTokens(uint64)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["withdrawBridgingFeeInTokens(uint64)void"] | undefined]>;

  /**
   * Calls the getBridgingCostInTokens(byte,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBridgingCostInTokens(
    params?: CallParams<
      | BridgeArgs["obj"]["getBridgingCostInTokens(byte,uint64)uint64"]
      | BridgeArgs["tuple"]["getBridgingCostInTokens(byte,uint64)uint64"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["getBridgingCostInTokens(byte,uint64)uint64"] | undefined]>;

  /**
   * Calls the hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hashMessage(
    params?: CallParams<
      | BridgeArgs["obj"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
      | BridgeArgs["tuple"]["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"]
    >
  ): BridgeComposer<
    [...TReturns, BridgeReturns["hashMessage(uint64,byte[32],byte,byte,byte[32],byte[32])byte[32]"] | undefined]
  >;

  /**
   * Calls the isOtherBridgeTokenSupported(byte,byte[32])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isOtherBridgeTokenSupported(
    params?: CallParams<
      | BridgeArgs["obj"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
      | BridgeArgs["tuple"]["isOtherBridgeTokenSupported(byte,byte[32])bool"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["isOtherBridgeTokenSupported(byte,byte[32])bool"] | undefined]>;

  /**
   * Calls the getTransactionCost(byte)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionCost(
    params?: CallParams<
      BridgeArgs["obj"]["getTransactionCost(byte)uint64"] | BridgeArgs["tuple"]["getTransactionCost(byte)uint64"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["getTransactionCost(byte)uint64"] | undefined]>;

  /**
   * Calls the getReceiveTokensCost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getReceiveTokensCost(
    params?: CallParams<
      BridgeArgs["obj"]["getReceiveTokensCost()uint64"] | BridgeArgs["tuple"]["getReceiveTokensCost()uint64"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["getReceiveTokensCost()uint64"] | undefined]>;

  /**
   * Calls the getSendTransactionStorageCost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSendTransactionStorageCost(
    params?: CallParams<
      | BridgeArgs["obj"]["getSendTransactionStorageCost()uint64"]
      | BridgeArgs["tuple"]["getSendTransactionStorageCost()uint64"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["getSendTransactionStorageCost()uint64"] | undefined]>;

  /**
   * Calls the swap(uint64,uint64,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(
    params?: CallParams<
      | BridgeArgs["obj"]["swap(uint64,uint64,address,uint64)void"]
      | BridgeArgs["tuple"]["swap(uint64,uint64,address,uint64)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["swap(uint64,uint64,address,uint64)void"] | undefined]>;

  /**
   * Calls the addPool(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPool(
    params?: CallParams<
      BridgeArgs["obj"]["addPool(uint64,uint64)void"] | BridgeArgs["tuple"]["addPool(uint64,uint64)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["addPool(uint64,uint64)void"] | undefined]>;

  /**
   * Calls the removePool(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removePool(
    params?: CallParams<BridgeArgs["obj"]["removePool(uint64)void"] | BridgeArgs["tuple"]["removePool(uint64)void"]>
  ): BridgeComposer<[...TReturns, BridgeReturns["removePool(uint64)void"] | undefined]>;

  /**
   * Calls the stopSwap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stopSwap(
    params?: CallParams<BridgeArgs["obj"]["stopSwap()void"] | BridgeArgs["tuple"]["stopSwap()void"]>
  ): BridgeComposer<[...TReturns, BridgeReturns["stopSwap()void"] | undefined]>;

  /**
   * Calls the startSwap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startSwap(
    params?: CallParams<BridgeArgs["obj"]["startSwap()void"] | BridgeArgs["tuple"]["startSwap()void"]>
  ): BridgeComposer<[...TReturns, BridgeReturns["startSwap()void"] | undefined]>;

  /**
   * Calls the setStopAuthority(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setStopAuthority(
    params?: CallParams<
      BridgeArgs["obj"]["setStopAuthority(address)void"] | BridgeArgs["tuple"]["setStopAuthority(address)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["setStopAuthority(address)void"] | undefined]>;

  /**
   * Calls the setRebalancer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRebalancer(
    params?: CallParams<
      BridgeArgs["obj"]["setRebalancer(address)void"] | BridgeArgs["tuple"]["setRebalancer(address)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["setRebalancer(address)void"] | undefined]>;

  /**
   * Calls the getGasUsage(byte)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGasUsage(
    params?: CallParams<BridgeArgs["obj"]["getGasUsage(byte)uint64"] | BridgeArgs["tuple"]["getGasUsage(byte)uint64"]>
  ): BridgeComposer<[...TReturns, BridgeReturns["getGasUsage(byte)uint64"] | undefined]>;

  /**
   * Calls the setGasUsage(byte,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGasUsage(
    params?: CallParams<
      BridgeArgs["obj"]["setGasUsage(byte,uint64)void"] | BridgeArgs["tuple"]["setGasUsage(byte,uint64)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["setGasUsage(byte,uint64)void"] | undefined]>;

  /**
   * Calls the setGasOracle(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGasOracle(
    params?: CallParams<
      BridgeArgs["obj"]["setGasOracle(application)void"] | BridgeArgs["tuple"]["setGasOracle(application)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["setGasOracle(application)void"] | undefined]>;

  /**
   * Calls the getTransactionRelayerCost(byte)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionRelayerCost(
    params?: CallParams<
      | BridgeArgs["obj"]["getTransactionRelayerCost(byte)uint64"]
      | BridgeArgs["tuple"]["getTransactionRelayerCost(byte)uint64"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["getTransactionRelayerCost(byte)uint64"] | undefined]>;

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(
    params?: CallParams<
      BridgeArgs["obj"]["transferOwnership(address)void"] | BridgeArgs["tuple"]["transferOwnership(address)void"]
    >
  ): BridgeComposer<[...TReturns, BridgeReturns["transferOwnership(address)void"] | undefined]>;

  /**
   * Makes a clear_state call to an existing instance of the Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BridgeComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BridgeComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BridgeComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<BridgeComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: RawSimulateOptions
  ): Promise<BridgeComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BridgeComposerResults<TReturns>>;
};
export type BridgeComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
