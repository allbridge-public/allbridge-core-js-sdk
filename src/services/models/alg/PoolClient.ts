/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from "@algorandfoundation/algokit-utils/types/algorand-client";
import { ABIReturn, AppReturn, SendAppTransactionResult } from "@algorandfoundation/algokit-utils/types/app";
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from "@algorandfoundation/algokit-utils/types/app-arc56";
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from "@algorandfoundation/algokit-utils/types/app-client";
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from "@algorandfoundation/algokit-utils/types/app-factory";
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from "@algorandfoundation/algokit-utils/types/composer";
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from "@algorandfoundation/algokit-utils/types/transaction";
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from "algosdk";

export const APP_SPEC: Arc56Contract = {
  name: "Pool",
  structs: {},
  methods: [
    {
      name: "createApplication",
      args: [
        { type: "address", name: "owner" },
        { type: "address", name: "router" },
        { type: "uint64", name: "a" },
        { type: "uint64", name: "assetId" },
        { type: "uint64", name: "feeShareBP" },
        { type: "uint64", name: "balanceRatioMinBP" },
      ],
      returns: { type: "void" },
      actions: { create: ["NoOp"], call: [] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "optInToApplication",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["OptIn"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "optInAsset",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      desc: "Opt-in the application account to the ASA stored in `this.asset`.\nThis performs an inner axfer of 0 to the app's own address.\nCall once after deploy (or whenever you change the asset).",
      events: [],
      recommendations: {},
    },
    {
      name: "noop",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "deposit",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "RewardsClaimed",
          args: [
            { type: "address", name: "user" },
            { type: "uint64", name: "pending" },
          ],
        },
        {
          name: "Deposit",
          args: [
            { type: "address", name: "to" },
            { type: "uint64", name: "lpAmount" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "withdraw",
      args: [{ type: "uint64", name: "amountLp", desc: "The Withdrawn amount" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "RewardsClaimed",
          args: [
            { type: "address", name: "user" },
            { type: "uint64", name: "pending" },
          ],
        },
        {
          name: "Withdraw",
          args: [
            { type: "address", name: "from" },
            { type: "uint64", name: "lpAmount" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "swapToVUsd",
      args: [
        { type: "address", name: "user" },
        { type: "uint64", name: "amount", desc: "The amount of tokens to swap." },
        {
          type: "bool",
          name: "zeroFee",
          desc: "When true it allows to swap without incurring any fees. It is intended for use with service\naccounts.",
        },
      ],
      returns: { type: "uint64", desc: "returns the difference between the old and the new value of vUsdBalance" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "SwappedToVUsd",
          args: [
            { type: "address", name: "sender" },
            { type: "uint64", name: "tokenId" },
            { type: "uint64", name: "amount" },
            { type: "uint64", name: "vUsdAmount" },
            { type: "uint64", name: "fee" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "swapFromVUsd",
      args: [
        { type: "address", name: "user", desc: "The address of the recipient." },
        { type: "uint64", name: "amount", desc: "The amount of vUSD to swap." },
        {
          type: "uint64",
          name: "receiveAmountMin",
          desc: "The minimum amount of tokens required to be received during the swap, otherwise the\ntransaction reverts.",
        },
        {
          type: "bool",
          name: "zeroFee",
          desc: "When true it allows to swap without incurring any fees. It is intended for use with service\naccounts.",
        },
      ],
      returns: { type: "uint64", desc: "returns the difference between the old and the new value of vUsdBalance" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "SwappedFromVUsd",
          args: [
            { type: "address", name: "recipient" },
            { type: "uint64", name: "tokenId" },
            { type: "uint64", name: "vUsdAmount" },
            { type: "uint64", name: "amount" },
            { type: "uint64", name: "fee" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "setFeeShare",
      args: [{ type: "uint64", name: "feeShareBP" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "adjustTotalLpAmount",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "RewardsClaimed",
          args: [
            { type: "address", name: "user" },
            { type: "uint64", name: "pending" },
          ],
        },
        {
          name: "Deposit",
          args: [
            { type: "address", name: "to" },
            { type: "uint64", name: "lpAmount" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "setBalanceRatioMinBP",
      args: [{ type: "uint64", name: "balanceRatioMinBP" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "stopDeposit",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "startDeposit",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "stopWithdraw",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "startWithdraw",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "setStopAuthority",
      args: [{ type: "address", name: "stopAuthority" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "setRouter",
      args: [{ type: "address", name: "router" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "claimRewards",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [
        {
          name: "RewardsClaimed",
          args: [
            { type: "address", name: "user" },
            { type: "uint64", name: "pending" },
          ],
        },
      ],
      recommendations: {},
    },
    {
      name: "setAdminFeeShare",
      args: [{ type: "uint64", name: "adminFeeShareBP" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "claimAdminFee",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "pendingReward",
      args: [{ type: "account", name: "user" }],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "decimals",
      args: [],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "transferOwnership",
      args: [{ type: "address", name: "newOwner" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  desc: "4AD - D = 4A(x + y) - (D³ / 4xy)\nX - is value of real stable token\nY - is value of virtual usd",
  networks: {},
  state: {
    schema: { global: { ints: 15, bytes: 4 }, local: { ints: 2, bytes: 0 } },
    keys: {
      global: {
        feeShareBP: { keyType: "AVMString", valueType: "AVMUint64", key: "ZmVlU2hhcmVCUA==" },
        router: { keyType: "AVMString", valueType: "address", key: "cm91dGVy" },
        tokenBalance: { keyType: "AVMString", valueType: "AVMUint64", key: "dG9rZW5CYWxhbmNl" },
        vUsdBalance: { keyType: "AVMString", valueType: "AVMUint64", key: "dlVzZEJhbGFuY2U=" },
        balanceRatioMinBP: { keyType: "AVMString", valueType: "AVMUint64", key: "YmFsYW5jZVJhdGlvTWluQlA=" },
        reserves: { keyType: "AVMString", valueType: "AVMUint64", key: "cmVzZXJ2ZXM=" },
        a: { keyType: "AVMString", valueType: "AVMUint64", key: "YQ==" },
        d: { keyType: "AVMString", valueType: "AVMUint64", key: "ZA==" },
        tokenAmountReduce: { keyType: "AVMString", valueType: "AVMUint64", key: "dG9rZW5BbW91bnRSZWR1Y2U=" },
        tokenAmountIncrease: { keyType: "AVMString", valueType: "AVMUint64", key: "dG9rZW5BbW91bnRJbmNyZWFzZQ==" },
        stopAuthority: { keyType: "AVMString", valueType: "address", key: "c3RvcEF1dGhvcml0eQ==" },
        canDeposit: { keyType: "AVMString", valueType: "AVMUint64", key: "Y2FuRGVwb3NpdA==" },
        canWithdraw: { keyType: "AVMString", valueType: "AVMUint64", key: "Y2FuV2l0aGRyYXc=" },
        asset: { keyType: "AVMString", valueType: "AVMUint64", key: "YXNzZXQ=" },
        adminFeeShareBP: { keyType: "AVMString", valueType: "AVMUint64", key: "YWRtaW5GZWVTaGFyZUJQ" },
        totalSupply: { keyType: "AVMString", valueType: "AVMUint64", key: "dG90YWxTdXBwbHk=" },
        accRewardPerShareP: { keyType: "AVMString", valueType: "AVMBytes", key: "YWNjUmV3YXJkUGVyU2hhcmVQ" },
        adminFeeAmount: { keyType: "AVMString", valueType: "AVMUint64", key: "YWRtaW5GZWVBbW91bnQ=" },
        owner: { keyType: "AVMString", valueType: "address", key: "b3duZXI=" },
      },
      local: {
        balance: { keyType: "AVMString", valueType: "AVMUint64", key: "YmFsYW5jZQ==" },
        userRewardDebt: { keyType: "AVMString", valueType: "AVMUint64", key: "dXNlclJld2FyZERlYnQ=" },
      },
      box: {},
    },
    maps: { global: {}, local: {}, box: {} },
  },
  bareActions: { create: [], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        { pc: [1446], errorMessage: '"Pool: withdraw prohibited' },
        { pc: [1249], errorMessage: "Asset must go to app" },
        { pc: [1232], errorMessage: "Asset txn missing" },
        { pc: [1270], errorMessage: "CloseTo not allowed" },
        {
          pc: [
            514, 529, 553, 577, 589, 605, 617, 632, 647, 659, 671, 683, 695, 711, 723, 739, 773, 803, 819, 831, 840,
            865,
          ],
          errorMessage: "OnCompletion is not NoOp",
        },
        { pc: [853], errorMessage: "OnCompletion is not OptIn" },
        { pc: [3306], errorMessage: "Only owner" },
        { pc: [1216], errorMessage: "Pool: deposit prohibited" },
        { pc: [1141], errorMessage: "Pool: is not stopAuthority" },
        { pc: [1206], errorMessage: "Pool: low token balance" },
        { pc: [1182], errorMessage: "Pool: low vUSD balance" },
        { pc: [1131], errorMessage: "Pool: only router" },
        { pc: [1701, 1983], errorMessage: "Pool: reserves" },
        { pc: [2027], errorMessage: "Pool: slippage" },
        { pc: [2116, 2175], errorMessage: "Pool: too large" },
        { pc: [1280], errorMessage: "Pool: too little" },
        { pc: [1369], errorMessage: "Pool: too much" },
        { pc: [1723], errorMessage: "Pool: zero D changes" },
        { pc: [1693], errorMessage: "Pool: zero changes" },
        { pc: [1263], errorMessage: "Rekey not allowed" },
        { pc: [1468], errorMessage: "RewardManager: not enough amount" },
        { pc: [2994], errorMessage: "RewardManager: too high" },
        { pc: [1256], errorMessage: "Wrong asset" },
        { pc: [984], errorMessage: "asset exists" },
        { pc: [869], errorMessage: "can only call when creating" },
        {
          pc: [
            517, 532, 556, 580, 592, 608, 620, 635, 650, 662, 674, 686, 698, 714, 726, 742, 776, 806, 822, 834, 843,
            856,
          ],
          errorMessage: "can only call when not creating",
        },
        {
          pc: [
            977, 1080, 1129, 1139, 1153, 1163, 1180, 1204, 1215, 1225, 1229, 1284, 1298, 1308, 1326, 1336, 1350, 1360,
            1374, 1412, 1445, 1451, 1476, 1531, 1563, 1614, 1618, 1624, 1660, 1686, 1690, 1697, 1705, 1719, 1728, 1775,
            1805, 1815, 1823, 1833, 1841, 1870, 1929, 1939, 1955, 1976, 1987, 2002, 2032, 2066, 2137, 2148, 2251, 2260,
            2408, 2413, 2421, 2529, 2537, 2578, 2586, 2917, 2954, 3015, 3023, 3028, 3064, 3092, 3100, 3118, 3138, 3152,
            3216, 3250, 3304,
          ],
          errorMessage: "check GlobalState exists",
        },
        { pc: [1463, 1500, 1516, 2906, 2934, 3058, 3078, 3164, 3186, 3201], errorMessage: "check LocalState exists" },
        { pc: [2626], errorMessage: "n must be non-negative" },
        { pc: [1395, 1426, 1642, 1674], errorMessage: "overflow" },
        { pc: [1242], errorMessage: "transaction type is axfer" },
      ],
      pcOffsetMethod: "none",
    },
    clear: { sourceInfo: [], pcOffsetMethod: "none" },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  byteCode: {
    approval:
      "CiAFAAEIBJBOJhwMdG9rZW5CYWxhbmNlC3ZVc2RCYWxhbmNlBWFzc2V0CHJlc2VydmVzB2JhbGFuY2UOdXNlclJld2FyZERlYnQBZAt0b3RhbFN1cHBseRJhY2NSZXdhcmRQZXJTaGFyZVAHAQAAAAAAAAEBDmFkbWluRmVlQW1vdW50CmNhbkRlcG9zaXQLY2FuV2l0aGRyYXcFb3duZXIKZmVlU2hhcmVCUBFiYWxhbmNlUmF0aW9NaW5CUAECD2FkbWluRmVlU2hhcmVCUAQVH3x1AWEGcm91dGVyDXN0b3BBdXRob3JpdHkRdG9rZW5BbW91bnRSZWR1Y2UTdG9rZW5BbW91bnRJbmNyZWFzZQS6gYB2AQMJAQAAAAAAAAAAMRhAACgnEoHQD2cnByJnJwiAAGcnCyJnKCJnKSJnKyJnJwYiZycMI2cnDSNnMRtBAKiCFwRRbTR7BAGjo/8EdhCkYAToOoerBJLgOxwEIfHd/wTZeK0UBA0bTAYEdb+aKAT0k9ftBI1ctt8E/gSlzgQCjghZBEH8lm4Eq/IAFAQEsWHxBGZZHM8Epa5r0QSgTFvEBDYbYVkEMruwEQS4d57nBOF7r7Q2GgCOFwFhAVQBSAE/ATMBIwEFAOMA0wDHALcAqwCfAJMAhwB4AGkAXQBNAEEAKQARAAIiQzEZFEQxGEQ2GgGICuAjQzEZFEQxGESADBUffHUAAAAAAAAAA7AjQzEZFEQxGEQ2GgEXwByICbMWJxNMULAjQzEZFEQxGESICXEjQzEZFEQxGEQ2GgEXiAlPI0MxGRREMRhEiAjlI0MxGRREMRhENhoBiAY/I0MxGRREMRhENhoBiAYkI0MxGRREMRhEiAYQI0MxGRREMRhEiAX8I0MxGRREMRhEiAXoI0MxGRREMRhEiAXUI0MxGRREMRhENhoBF4gFsiNDMRkURDEYRIgFfSNDMRkURDEYRDYaAReIBVsjQzEZFEQxGEQ2GgE2GgIXNhoDFzYaBCJTiAR7FicTTFCwI0MxGRREMRhENhoBNhoCFzYaAyJTiAO+FicTTFCwI0MxGRREMRhENhoBF4gCcCNDMRkURDEYRIgBfiNDMRkURDEYRCNDMRkURDEYRIgA4iNDMRkjEkQxGESIAK4jQzEZFEQxGBRENhoBNhoCNhoDFzYaBBc2GgUXNhoGF4gAKiNDigEBi/8VSSQNQQAYiwAkCUmLAElOAw9LAkxNi/9MTwJSF0yJIkL/6IoGACcOi/pnKov9ZycUi/xnJxWL+2cnFov6ZycPi/5nJxCL/2ciKmVEcQFMSU8CRIEDDUEAJ4sAgQMJgQpMlCcXTGeLAIEDDEEADoEDiwAJgQpMlCcYTGeJIkL/9yJC/96KAAAxAEkiJwRjRQFAAAaLACcEImaLACInBWNFAUAABosAJwUiZomICK6xIiplRDIKshQishKyESWyECKyAbOAFlBvb2w6IG9wdC1pbiBjb21wbGV0ZWSwiTEAIicVZUQSRIkxACInFmVEEkSJigAAIihlTElPAkQiKWVMSU4CTgNEDUEAEIsBIQQLiwAKIicQZUQPRImLAIsBDEH/94sAIQQLiwEKIicQZUQPRImKAAAiJwxlREQiJwZlTElPAkQiKmVEMRZEMRYjCUk4ECUSREk4FDIKEkRJOBFPAhJESTggMgMSREk4FTIDEkQ4EogE2klOAklEIitlRAgrTGciKGVMSU4CTgNEIillTElOAk4ERAhMQQAFiwRAADSLASORIihlREsBCChMZyIpZUQIKUxniAQiMQAiJwZlRIsACYgG/CIoZUSBgICAgIAgDESJIihlRIsBFosCFksBo4sEFkxLAaJJFSQORCSvTEsBqxdPBAgoTGciKWVEiwMWTwSjTwOiSRUkDkRPAqsXCClMZ0L/n4oBACInDWVERCInBmVEMQBJIicEY0xJTwJESYv/D0QiJwhlTE4CRCJMQQAWiwIWiwOjJwmiiP2riwEiJwVjRAmMBIsCi/8JiwFJIicEY0SL/wlLAScETwJmIicHZUSL/wknB0xnTBaLA6MnCaKI/XMnBUxmiwRBACOxIiplRIsBSU4CshSLBElOArISshElshAisgGzFlAnGUxQsIv/FosBSwFQgATTr6TxTFCwIihlRCIpZURKCCIoZURPAxZLBKNLAhZMSwGiSRUkDkQkr0xLAasXTwNMCShMZyIpZURPBBZPBaNPA6JJFSQORE8CqxcJKUxnIihlRCIpZUQIDUQiK2VEi/8PRCIrZUSL/wkrTGeIAq8iJwZlRIsADESxIiplRIv/iANBMQCyFLISshElshAisgGziYoDAYAAiP2FIkcDi/5BAGGL/0AADSInD2VEi/4LIQQKjAKL/osCCYgC1kmIAwOL/kwJjAIiKGVESwEIKExnIitlRAgrTGciKGVEiAGbSYwAIillRAxBAAkiKWVEiwAJjAEpiwBniwJJiATIjAOLAYwEiwOLBCIqZUQWi/4WSwIWTwQWi/1PBFBPA1BPAlBMUIAEK7vso0xQsIj9BYwAiYoEAYAASYj85SJHBIv9QQCFIillRIv9CClMZyIpZUSIASdJjAAiKGVMSU4CjAFEDEEADYsBiwAJSYwCiAJUjAMiK2VEiwJJTwIORCIrZURMCStMZ4v/QAANIicPZUSLAwshBAqMBIsDiwRJTgIJKIsAZ0mL/g9EsSIqZUSL/LIUSwGyErIRJbIQIrIBs0sBiAQCjAaMBYsFiwYiKmVEFov9FksCFk8EFov8TwRQTwNQTwJQTFCABNPx1UJMULCI/EGMAImKAQCIBKOL/yEEDkQnD4v/Z4mKAACIBJEiJwZlTElPAkQiJwdlTElOAk4DRA1BAAoxAIsAiwEJiAPWiYoBAIgEaIv/IQQORCcQi/9niYj75CcMImeJiARRJwwjZ4mI+9QnDSJniYgEQScNI2eJigEAiAQ2JxaL/2eJigEAiAQqJxWL/2eJigEBIkmL/xZJIicGZUQWSU4CIicUZUSBApAWSU4DJxGjTgKmSUEAdIsDiwKhiwSjjACLBkEAWosAiwOnQQBHiwCLA6GMASOLBIsDSU4Co0sBo6OLAUmjiwJJTwKjTwKgo4gBFkxBABWLAosBo6CLBYsCo6InCqCI+kmMAImLAosBo6FC/+iLA4sAoYwBIkL/tosAiwOgjAEiQv+riwKLA6FC/4mKAAAiKGVEFiIpZUQWSqMiJxRlRBZJSwKjTwRPBKCjSU4CTgOAAQSjJwqhTwKjJxqiSwFLAqNLAUsCo08Co6CIAJRJTgJKoIgA8k4DpEEAFYsAoYgA5osBTAmMAYsBI5AnBkxniYsATKGIANCLAQiMAUL/6IoBASInF2VMSU8CRCInGGVMTgJEQQAIi/+LAAqMAImLAUEACIv/iwELjACJi/+MAImKAQEiJxdlTElPAkQiJxhlTE4CREEACIv/iwALjACJiwFBAAiL/4sBCowAiYv/jACJigEBIkmL/4AApUSL/4AAqEEABYAAjACJi/8nGqZBAAUnCowAiYv/kyMIgQIKgQJMlUwWTBZMJxujoEmMAIv/SwGioCcRoowBiwGLAKRBABWL/4sBSU4CoksBoCcRoowBjABC/+OJigEBIkcDi/+AAKhBAAQijACJi/+AAQikQQAEI4wAiYv/k4ECCIEDCoECTJVMFkwWTCcbo6CMAYsBSaNJjAOAAKhAACcnEYsBSU4Co4v/iwOioCcaokmMAKhAAAuLAScKoYsAqEEAPYsAjAGLAScKoEmMAklLAaOji/+mQQAHiwKMAUL/5osBSUsBo6OL/6VBAAqLAScKoYwBQv/piwGI+EKMAImLAIwBQv+MigAAgABJMQBJIicEY0xJTwJEQQBIiwMWIicIZUSjJwmiiPgUSYwBiwIiJwVjRAlJjABBACiLAkknBYsBZrEiKmVESwGyFIsASU4CshKyESWyECKyAbMWUCcZTFCwiYoBAIgBNYv/IQQORCcSi/9niYoAAIgBIyInC2VMSU8CREEAHbEiKmVEIicOZUSyFIsAshKyESWyECKyAbMnCyJniYoBAYv/IicEY0QWIicIZUSjJwmiiPeBi/8iJwVjRAmJigEAIicHZUxJTwJEQQAwIicSZUSL/wshBAqL/0sBCYz/IicIZUSL/xYnCaOLABaioCcITGciJwtlRAgnC0xniYoCACInCGVEIov+IicEY0xJTwJEQQAWiwIWiwCjJwmiiPcVi/4iJwVjRAmMAYsCi/8Ii/4iJwRjRIv/CIv+JwRPAmYiJwdlRIv/CCcHTGcWiwCjJwmiiPbfi/4nBU8CZosBQQAjsSIqZUSL/rIUiwFJTgKyErIRJbIQIrIBsxaL/kxQJxlMULCL/xaL/kxQgATPq4cjTFCwiTEAIicOZUQSRImKAQCI//AnDov/Z4k=",
    clear: "CoEBQw==",
  },
  events: [
    {
      name: "RewardsClaimed",
      args: [
        { type: "address", name: "user" },
        { type: "uint64", name: "pending" },
      ],
    },
    {
      name: "Deposit",
      args: [
        { type: "address", name: "to" },
        { type: "uint64", name: "lpAmount" },
      ],
    },
    {
      name: "Withdraw",
      args: [
        { type: "address", name: "from" },
        { type: "uint64", name: "lpAmount" },
      ],
    },
    {
      name: "SwappedToVUsd",
      args: [
        { type: "address", name: "sender" },
        { type: "uint64", name: "tokenId" },
        { type: "uint64", name: "amount" },
        { type: "uint64", name: "vUsdAmount" },
        { type: "uint64", name: "fee" },
      ],
    },
    {
      name: "SwappedFromVUsd",
      args: [
        { type: "address", name: "recipient" },
        { type: "uint64", name: "tokenId" },
        { type: "uint64", name: "vUsdAmount" },
        { type: "uint64", name: "amount" },
        { type: "uint64", name: "fee" },
      ],
    },
  ],
  templateVariables: {},
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString("utf-8") : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never;

/**
 * The argument types for the Pool contract
 */
export type PoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    "createApplication(address,address,uint64,uint64,uint64,uint64)void": {
      owner: string;
      router: string;
      a: bigint | number;
      assetId: bigint | number;
      feeShareBp: bigint | number;
      balanceRatioMinBp: bigint | number;
    };
    "optInToApplication()void": Record<string, never>;
    "optInAsset()void": Record<string, never>;
    "noop()void": Record<string, never>;
    "deposit()void": Record<string, never>;
    "withdraw(uint64)void": {
      /**
       * The Withdrawn amount
       */
      amountLp: bigint | number;
    };
    "swapToVUsd(address,uint64,bool)uint64": {
      user: string;
      /**
       * The amount of tokens to swap.
       */
      amount: bigint | number;
      /**
      * When true it allows to swap without incurring any fees. It is intended for use with service
      accounts.

       */
      zeroFee: boolean;
    };
    "swapFromVUsd(address,uint64,uint64,bool)uint64": {
      /**
       * The address of the recipient.
       */
      user: string;
      /**
       * The amount of vUSD to swap.
       */
      amount: bigint | number;
      /**
      * The minimum amount of tokens required to be received during the swap, otherwise the
      transaction reverts.

       */
      receiveAmountMin: bigint | number;
      /**
      * When true it allows to swap without incurring any fees. It is intended for use with service
      accounts.

       */
      zeroFee: boolean;
    };
    "setFeeShare(uint64)void": {
      feeShareBp: bigint | number;
    };
    "adjustTotalLpAmount()void": Record<string, never>;
    "setBalanceRatioMinBP(uint64)void": {
      balanceRatioMinBp: bigint | number;
    };
    "stopDeposit()void": Record<string, never>;
    "startDeposit()void": Record<string, never>;
    "stopWithdraw()void": Record<string, never>;
    "startWithdraw()void": Record<string, never>;
    "setStopAuthority(address)void": {
      stopAuthority: string;
    };
    "setRouter(address)void": {
      router: string;
    };
    "claimRewards()void": Record<string, never>;
    "setAdminFeeShare(uint64)void": {
      adminFeeShareBp: bigint | number;
    };
    "claimAdminFee()void": Record<string, never>;
    "pendingReward(account)uint64": {
      user: Uint8Array | string;
    };
    "decimals()uint64": Record<string, never>;
    "transferOwnership(address)void": {
      newOwner: string;
    };
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    "createApplication(address,address,uint64,uint64,uint64,uint64)void": [
      owner: string,
      router: string,
      a: bigint | number,
      assetId: bigint | number,
      feeShareBp: bigint | number,
      balanceRatioMinBp: bigint | number,
    ];
    "optInToApplication()void": [];
    "optInAsset()void": [];
    "noop()void": [];
    "deposit()void": [];
    "withdraw(uint64)void": [amountLp: bigint | number];
    "swapToVUsd(address,uint64,bool)uint64": [user: string, amount: bigint | number, zeroFee: boolean];
    "swapFromVUsd(address,uint64,uint64,bool)uint64": [
      user: string,
      amount: bigint | number,
      receiveAmountMin: bigint | number,
      zeroFee: boolean,
    ];
    "setFeeShare(uint64)void": [feeShareBp: bigint | number];
    "adjustTotalLpAmount()void": [];
    "setBalanceRatioMinBP(uint64)void": [balanceRatioMinBp: bigint | number];
    "stopDeposit()void": [];
    "startDeposit()void": [];
    "stopWithdraw()void": [];
    "startWithdraw()void": [];
    "setStopAuthority(address)void": [stopAuthority: string];
    "setRouter(address)void": [router: string];
    "claimRewards()void": [];
    "setAdminFeeShare(uint64)void": [adminFeeShareBp: bigint | number];
    "claimAdminFee()void": [];
    "pendingReward(account)uint64": [user: Uint8Array | string];
    "decimals()uint64": [];
    "transferOwnership(address)void": [newOwner: string];
  };
};

/**
 * The return type for each method
 */
export type PoolReturns = {
  "createApplication(address,address,uint64,uint64,uint64,uint64)void": void;
  "optInToApplication()void": void;
  "optInAsset()void": void;
  "noop()void": void;
  "deposit()void": void;
  "withdraw(uint64)void": void;
  "swapToVUsd(address,uint64,bool)uint64": bigint;
  "swapFromVUsd(address,uint64,uint64,bool)uint64": bigint;
  "setFeeShare(uint64)void": void;
  "adjustTotalLpAmount()void": void;
  "setBalanceRatioMinBP(uint64)void": void;
  "stopDeposit()void": void;
  "startDeposit()void": void;
  "stopWithdraw()void": void;
  "startWithdraw()void": void;
  "setStopAuthority(address)void": void;
  "setRouter(address)void": void;
  "claimRewards()void": void;
  "setAdminFeeShare(uint64)void": void;
  "claimAdminFee()void": void;
  "pendingReward(account)uint64": bigint;
  "decimals()uint64": bigint;
  "transferOwnership(address)void": void;
};

/**
 * Defines the types of available calls and state of the Pool smart contract.
 */
export type PoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication(address,address,uint64,uint64,uint64,uint64)void" | "createApplication",
    {
      argsObj: PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"];
      argsTuple: PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"];
      returns: PoolReturns["createApplication(address,address,uint64,uint64,uint64,uint64)void"];
    }
  > &
    Record<
      "optInToApplication()void" | "optInToApplication",
      {
        argsObj: PoolArgs["obj"]["optInToApplication()void"];
        argsTuple: PoolArgs["tuple"]["optInToApplication()void"];
        returns: PoolReturns["optInToApplication()void"];
      }
    > &
    Record<
      "optInAsset()void" | "optInAsset",
      {
        argsObj: PoolArgs["obj"]["optInAsset()void"];
        argsTuple: PoolArgs["tuple"]["optInAsset()void"];
        returns: PoolReturns["optInAsset()void"];
      }
    > &
    Record<
      "noop()void" | "noop",
      {
        argsObj: PoolArgs["obj"]["noop()void"];
        argsTuple: PoolArgs["tuple"]["noop()void"];
        returns: PoolReturns["noop()void"];
      }
    > &
    Record<
      "deposit()void" | "deposit",
      {
        argsObj: PoolArgs["obj"]["deposit()void"];
        argsTuple: PoolArgs["tuple"]["deposit()void"];
        returns: PoolReturns["deposit()void"];
      }
    > &
    Record<
      "withdraw(uint64)void" | "withdraw",
      {
        argsObj: PoolArgs["obj"]["withdraw(uint64)void"];
        argsTuple: PoolArgs["tuple"]["withdraw(uint64)void"];
        returns: PoolReturns["withdraw(uint64)void"];
      }
    > &
    Record<
      "swapToVUsd(address,uint64,bool)uint64" | "swapToVUsd",
      {
        argsObj: PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"];
        argsTuple: PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"];
        /**
         * returns the difference between the old and the new value of vUsdBalance
         */
        returns: PoolReturns["swapToVUsd(address,uint64,bool)uint64"];
      }
    > &
    Record<
      "swapFromVUsd(address,uint64,uint64,bool)uint64" | "swapFromVUsd",
      {
        argsObj: PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"];
        argsTuple: PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"];
        /**
         * returns the difference between the old and the new value of vUsdBalance
         */
        returns: PoolReturns["swapFromVUsd(address,uint64,uint64,bool)uint64"];
      }
    > &
    Record<
      "setFeeShare(uint64)void" | "setFeeShare",
      {
        argsObj: PoolArgs["obj"]["setFeeShare(uint64)void"];
        argsTuple: PoolArgs["tuple"]["setFeeShare(uint64)void"];
        returns: PoolReturns["setFeeShare(uint64)void"];
      }
    > &
    Record<
      "adjustTotalLpAmount()void" | "adjustTotalLpAmount",
      {
        argsObj: PoolArgs["obj"]["adjustTotalLpAmount()void"];
        argsTuple: PoolArgs["tuple"]["adjustTotalLpAmount()void"];
        returns: PoolReturns["adjustTotalLpAmount()void"];
      }
    > &
    Record<
      "setBalanceRatioMinBP(uint64)void" | "setBalanceRatioMinBP",
      {
        argsObj: PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"];
        argsTuple: PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"];
        returns: PoolReturns["setBalanceRatioMinBP(uint64)void"];
      }
    > &
    Record<
      "stopDeposit()void" | "stopDeposit",
      {
        argsObj: PoolArgs["obj"]["stopDeposit()void"];
        argsTuple: PoolArgs["tuple"]["stopDeposit()void"];
        returns: PoolReturns["stopDeposit()void"];
      }
    > &
    Record<
      "startDeposit()void" | "startDeposit",
      {
        argsObj: PoolArgs["obj"]["startDeposit()void"];
        argsTuple: PoolArgs["tuple"]["startDeposit()void"];
        returns: PoolReturns["startDeposit()void"];
      }
    > &
    Record<
      "stopWithdraw()void" | "stopWithdraw",
      {
        argsObj: PoolArgs["obj"]["stopWithdraw()void"];
        argsTuple: PoolArgs["tuple"]["stopWithdraw()void"];
        returns: PoolReturns["stopWithdraw()void"];
      }
    > &
    Record<
      "startWithdraw()void" | "startWithdraw",
      {
        argsObj: PoolArgs["obj"]["startWithdraw()void"];
        argsTuple: PoolArgs["tuple"]["startWithdraw()void"];
        returns: PoolReturns["startWithdraw()void"];
      }
    > &
    Record<
      "setStopAuthority(address)void" | "setStopAuthority",
      {
        argsObj: PoolArgs["obj"]["setStopAuthority(address)void"];
        argsTuple: PoolArgs["tuple"]["setStopAuthority(address)void"];
        returns: PoolReturns["setStopAuthority(address)void"];
      }
    > &
    Record<
      "setRouter(address)void" | "setRouter",
      {
        argsObj: PoolArgs["obj"]["setRouter(address)void"];
        argsTuple: PoolArgs["tuple"]["setRouter(address)void"];
        returns: PoolReturns["setRouter(address)void"];
      }
    > &
    Record<
      "claimRewards()void" | "claimRewards",
      {
        argsObj: PoolArgs["obj"]["claimRewards()void"];
        argsTuple: PoolArgs["tuple"]["claimRewards()void"];
        returns: PoolReturns["claimRewards()void"];
      }
    > &
    Record<
      "setAdminFeeShare(uint64)void" | "setAdminFeeShare",
      {
        argsObj: PoolArgs["obj"]["setAdminFeeShare(uint64)void"];
        argsTuple: PoolArgs["tuple"]["setAdminFeeShare(uint64)void"];
        returns: PoolReturns["setAdminFeeShare(uint64)void"];
      }
    > &
    Record<
      "claimAdminFee()void" | "claimAdminFee",
      {
        argsObj: PoolArgs["obj"]["claimAdminFee()void"];
        argsTuple: PoolArgs["tuple"]["claimAdminFee()void"];
        returns: PoolReturns["claimAdminFee()void"];
      }
    > &
    Record<
      "pendingReward(account)uint64" | "pendingReward",
      {
        argsObj: PoolArgs["obj"]["pendingReward(account)uint64"];
        argsTuple: PoolArgs["tuple"]["pendingReward(account)uint64"];
        returns: PoolReturns["pendingReward(account)uint64"];
      }
    > &
    Record<
      "decimals()uint64" | "decimals",
      {
        argsObj: PoolArgs["obj"]["decimals()uint64"];
        argsTuple: PoolArgs["tuple"]["decimals()uint64"];
        returns: PoolReturns["decimals()uint64"];
      }
    > &
    Record<
      "transferOwnership(address)void" | "transferOwnership",
      {
        argsObj: PoolArgs["obj"]["transferOwnership(address)void"];
        argsTuple: PoolArgs["tuple"]["transferOwnership(address)void"];
        returns: PoolReturns["transferOwnership(address)void"];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        feeShareBp: bigint;
        router: string;
        tokenBalance: bigint;
        vUsdBalance: bigint;
        balanceRatioMinBp: bigint;
        reserves: bigint;
        a: bigint;
        d: bigint;
        tokenAmountReduce: bigint;
        tokenAmountIncrease: bigint;
        stopAuthority: string;
        canDeposit: bigint;
        canWithdraw: bigint;
        asset: bigint;
        adminFeeShareBp: bigint;
        totalSupply: bigint;
        accRewardPerShareP: BinaryState;
        adminFeeAmount: bigint;
        owner: string;
      };
      maps: {};
    };
    local: {
      keys: {
        balance: bigint;
        userRewardDebt: bigint;
      };
      maps: {};
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type PoolSignatures = keyof PoolTypes["methods"];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PoolNonVoidMethodSignatures = keyof PoolTypes["methods"] extends infer T
  ? T extends keyof PoolTypes["methods"]
    ? MethodReturn<T> extends void
      ? never
      : T
    : never
  : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, "method" | "args" | "onComplete"> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the Pool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PoolSignatures> = PoolTypes["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the Pool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PoolSignatures> = PoolTypes["methods"][TSignature]["returns"];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PoolTypes["state"]["global"]["keys"];

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = PoolTypes["state"]["local"]["keys"];

/**
 * Defines supported create method params for this smart contract
 */
export type PoolCreateCallParams =
  | Expand<
      CallParams<
        | PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
        | PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
      > & { method: "createApplication" } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >
  | Expand<
      CallParams<
        | PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
        | PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
      > & { method: "createApplication(address,address,uint64,uint64,uint64,uint64)void" } & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } & CreateSchema
    >;
/**
 * Defines arguments required for the deploy method.
 */
export type PoolDeployParams = Expand<
  Omit<AppFactoryDeployParams, "createParams" | "updateParams" | "deleteParams"> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: PoolCreateCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Pool smart contract
 */
export abstract class PoolParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends PoolCreateCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case "createApplication":
          case "createApplication(address,address,uint64,uint64,uint64,uint64)void":
            return PoolParamsFactory.create.createApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs create ABI call params for the Pool smart contract using the createApplication(address,address,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
          | PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
        > &
          AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ): AppClientMethodCallParams & AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC } {
        return {
          ...params,
          method: "createApplication(address,address,uint64,uint64,uint64,uint64)void" as const,
          args: Array.isArray(params.args)
            ? params.args
            : [
                params.args.owner,
                params.args.router,
                params.args.a,
                params.args.assetId,
                params.args.feeShareBp,
                params.args.balanceRatioMinBp,
              ],
        };
      },
    };
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the Pool smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(
        params: CallParams<PoolArgs["obj"]["optInToApplication()void"] | PoolArgs["tuple"]["optInToApplication()void"]>
      ): AppClientMethodCallParams {
        return {
          ...params,
          method: "optInToApplication()void" as const,
          args: Array.isArray(params.args) ? params.args : [],
        };
      },
    };
  }

  /**
   * Constructs a no op call for the optInAsset()void ABI method
   *
  * Opt-in the application account to the ASA stored in `this.asset`.
  This performs an inner axfer of 0 to the app's own address.
  Call once after deploy (or whenever you change the asset).

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInAsset(
    params: CallParams<PoolArgs["obj"]["optInAsset()void"] | PoolArgs["tuple"]["optInAsset()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "optInAsset()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the noop()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noop(
    params: CallParams<PoolArgs["obj"]["noop()void"] | PoolArgs["tuple"]["noop()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "noop()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the deposit()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deposit(
    params: CallParams<PoolArgs["obj"]["deposit()void"] | PoolArgs["tuple"]["deposit()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "deposit()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(
    params: CallParams<PoolArgs["obj"]["withdraw(uint64)void"] | PoolArgs["tuple"]["withdraw(uint64)void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "withdraw(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountLp],
    };
  }
  /**
   * Constructs a no op call for the swapToVUsd(address,uint64,bool)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swapToVUsd(
    params: CallParams<
      | PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"]
      | PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "swapToVUsd(address,uint64,bool)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.amount, params.args.zeroFee],
    };
  }
  /**
   * Constructs a no op call for the swapFromVUsd(address,uint64,uint64,bool)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swapFromVUsd(
    params: CallParams<
      | PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
      | PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "swapFromVUsd(address,uint64,uint64,bool)uint64" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.user, params.args.amount, params.args.receiveAmountMin, params.args.zeroFee],
    };
  }
  /**
   * Constructs a no op call for the setFeeShare(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setFeeShare(
    params: CallParams<PoolArgs["obj"]["setFeeShare(uint64)void"] | PoolArgs["tuple"]["setFeeShare(uint64)void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setFeeShare(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feeShareBp],
    };
  }
  /**
   * Constructs a no op call for the adjustTotalLpAmount()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adjustTotalLpAmount(
    params: CallParams<PoolArgs["obj"]["adjustTotalLpAmount()void"] | PoolArgs["tuple"]["adjustTotalLpAmount()void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "adjustTotalLpAmount()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the setBalanceRatioMinBP(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBalanceRatioMinBp(
    params: CallParams<
      PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"] | PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setBalanceRatioMinBP(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.balanceRatioMinBp],
    };
  }
  /**
   * Constructs a no op call for the stopDeposit()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stopDeposit(
    params: CallParams<PoolArgs["obj"]["stopDeposit()void"] | PoolArgs["tuple"]["stopDeposit()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "stopDeposit()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the startDeposit()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startDeposit(
    params: CallParams<PoolArgs["obj"]["startDeposit()void"] | PoolArgs["tuple"]["startDeposit()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "startDeposit()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the stopWithdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stopWithdraw(
    params: CallParams<PoolArgs["obj"]["stopWithdraw()void"] | PoolArgs["tuple"]["stopWithdraw()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "stopWithdraw()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the startWithdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startWithdraw(
    params: CallParams<PoolArgs["obj"]["startWithdraw()void"] | PoolArgs["tuple"]["startWithdraw()void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "startWithdraw()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the setStopAuthority(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setStopAuthority(
    params: CallParams<
      PoolArgs["obj"]["setStopAuthority(address)void"] | PoolArgs["tuple"]["setStopAuthority(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setStopAuthority(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stopAuthority],
    };
  }
  /**
   * Constructs a no op call for the setRouter(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setRouter(
    params: CallParams<PoolArgs["obj"]["setRouter(address)void"] | PoolArgs["tuple"]["setRouter(address)void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setRouter(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.router],
    };
  }
  /**
   * Constructs a no op call for the claimRewards()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(
    params: CallParams<PoolArgs["obj"]["claimRewards()void"] | PoolArgs["tuple"]["claimRewards()void"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "claimRewards()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the setAdminFeeShare(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAdminFeeShare(
    params: CallParams<
      PoolArgs["obj"]["setAdminFeeShare(uint64)void"] | PoolArgs["tuple"]["setAdminFeeShare(uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "setAdminFeeShare(uint64)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.adminFeeShareBp],
    };
  }
  /**
   * Constructs a no op call for the claimAdminFee()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimAdminFee(
    params: CallParams<PoolArgs["obj"]["claimAdminFee()void"] | PoolArgs["tuple"]["claimAdminFee()void"]> &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "claimAdminFee()void" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the pendingReward(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pendingReward(
    params: CallParams<
      PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "pendingReward(account)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    };
  }
  /**
   * Constructs a no op call for the decimals()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static decimals(
    params: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]> & CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "decimals()uint64" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferOwnership(
    params: CallParams<
      PoolArgs["obj"]["transferOwnership(address)void"] | PoolArgs["tuple"]["transferOwnership(address)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "transferOwnership(address)void" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the Pool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `PoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, "appSpec">) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PoolClient(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {
    return new PoolClient(await this.appFactory.getAppClientByCreatorAndName(params));
  }

  /**
   * Idempotently deploys the Pool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? PoolParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
          ? (params.createParams as PoolCreateCallParams & { args: Uint8Array[] })
          : undefined,
    });
    return { result: result.result, appClient: new PoolClient(result.appClient) };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pool smart contract using the createApplication(address,address,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
          | PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.params.create(PoolParamsFactory.create.createApplication(params));
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pool smart contract using the createApplication(address,address,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
          | PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.createTransaction.create(PoolParamsFactory.create.createApplication(params));
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Pool smart contract using an ABI method call using the createApplication(address,address,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | PoolArgs["obj"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
          | PoolArgs["tuple"]["createApplication(address,address,uint64,uint64,uint64,uint64)void"]
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        const result = await this.appFactory.send.create(PoolParamsFactory.create.createApplication(params));
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as
              | undefined
              | PoolReturns["createApplication(address,address,uint64,uint64,uint64,uint64)void"],
          },
          appClient: new PoolClient(result.appClient),
        };
      },
    },
  };
}
/**
 * A client to make calls to the Pool smart contract
 */
export class PoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `PoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Pool app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `PoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, "appSpec">);
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, "appSpec">) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PoolNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `PoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, "appSpec">
  ): Promise<PoolClient> {
    return new PoolClient(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }));
  }

  /**
   * Returns an `PoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, "appSpec">): Promise<PoolClient> {
    return new PoolClient(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }));
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Pool smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (
        params: CallParams<
          PoolArgs["obj"]["optInToApplication()void"] | PoolArgs["tuple"]["optInToApplication()void"]
        > = { args: [] }
      ) => {
        return this.appClient.params.optIn(PoolParamsFactory.optIn.optInToApplication(params));
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Pool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the Pool smart contract using the `optInAsset()void` ABI method.
     *
    * Opt-in the application account to the ASA stored in `this.asset`.
    This performs an inner axfer of 0 to the app's own address.
    Call once after deploy (or whenever you change the asset).

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInAsset: (
      params: CallParams<PoolArgs["obj"]["optInAsset()void"] | PoolArgs["tuple"]["optInAsset()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.optInAsset(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noop: (
      params: CallParams<PoolArgs["obj"]["noop()void"] | PoolArgs["tuple"]["noop()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.noop(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `deposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deposit: (
      params: CallParams<PoolArgs["obj"]["deposit()void"] | PoolArgs["tuple"]["deposit()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.deposit(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (
      params: CallParams<PoolArgs["obj"]["withdraw(uint64)void"] | PoolArgs["tuple"]["withdraw(uint64)void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.withdraw(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `swapToVUsd(address,uint64,bool)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: returns the difference between the old and the new value of vUsdBalance
     */
    swapToVUsd: (
      params: CallParams<
        | PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"]
        | PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.swapToVUsd(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `swapFromVUsd(address,uint64,uint64,bool)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: returns the difference between the old and the new value of vUsdBalance
     */
    swapFromVUsd: (
      params: CallParams<
        | PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
        | PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.swapFromVUsd(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setFeeShare(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setFeeShare: (
      params: CallParams<PoolArgs["obj"]["setFeeShare(uint64)void"] | PoolArgs["tuple"]["setFeeShare(uint64)void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.setFeeShare(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `adjustTotalLpAmount()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    adjustTotalLpAmount: (
      params: CallParams<
        PoolArgs["obj"]["adjustTotalLpAmount()void"] | PoolArgs["tuple"]["adjustTotalLpAmount()void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.adjustTotalLpAmount(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setBalanceRatioMinBP(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBalanceRatioMinBp: (
      params: CallParams<
        PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"] | PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.setBalanceRatioMinBp(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `stopDeposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stopDeposit: (
      params: CallParams<PoolArgs["obj"]["stopDeposit()void"] | PoolArgs["tuple"]["stopDeposit()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.stopDeposit(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `startDeposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startDeposit: (
      params: CallParams<PoolArgs["obj"]["startDeposit()void"] | PoolArgs["tuple"]["startDeposit()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.startDeposit(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `stopWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stopWithdraw: (
      params: CallParams<PoolArgs["obj"]["stopWithdraw()void"] | PoolArgs["tuple"]["stopWithdraw()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.stopWithdraw(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `startWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startWithdraw: (
      params: CallParams<PoolArgs["obj"]["startWithdraw()void"] | PoolArgs["tuple"]["startWithdraw()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.startWithdraw(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setStopAuthority(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setStopAuthority: (
      params: CallParams<
        PoolArgs["obj"]["setStopAuthority(address)void"] | PoolArgs["tuple"]["setStopAuthority(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.setStopAuthority(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setRouter(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setRouter: (
      params: CallParams<PoolArgs["obj"]["setRouter(address)void"] | PoolArgs["tuple"]["setRouter(address)void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.setRouter(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (
      params: CallParams<PoolArgs["obj"]["claimRewards()void"] | PoolArgs["tuple"]["claimRewards()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.claimRewards(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setAdminFeeShare(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAdminFeeShare: (
      params: CallParams<
        PoolArgs["obj"]["setAdminFeeShare(uint64)void"] | PoolArgs["tuple"]["setAdminFeeShare(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.setAdminFeeShare(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `claimAdminFee()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimAdminFee: (
      params: CallParams<PoolArgs["obj"]["claimAdminFee()void"] | PoolArgs["tuple"]["claimAdminFee()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.claimAdminFee(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `pendingReward(account)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pendingReward: (
      params: CallParams<
        PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.pendingReward(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `decimals()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    decimals: (
      params: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.decimals(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `transferOwnership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferOwnership: (
      params: CallParams<
        PoolArgs["obj"]["transferOwnership(address)void"] | PoolArgs["tuple"]["transferOwnership(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(PoolParamsFactory.transferOwnership(params));
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Pool smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (
        params: CallParams<
          PoolArgs["obj"]["optInToApplication()void"] | PoolArgs["tuple"]["optInToApplication()void"]
        > = { args: [] }
      ) => {
        return this.appClient.createTransaction.optIn(PoolParamsFactory.optIn.optInToApplication(params));
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Pool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the Pool smart contract using the `optInAsset()void` ABI method.
     *
    * Opt-in the application account to the ASA stored in `this.asset`.
    This performs an inner axfer of 0 to the app's own address.
    Call once after deploy (or whenever you change the asset).

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInAsset: (
      params: CallParams<PoolArgs["obj"]["optInAsset()void"] | PoolArgs["tuple"]["optInAsset()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.optInAsset(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noop: (
      params: CallParams<PoolArgs["obj"]["noop()void"] | PoolArgs["tuple"]["noop()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.noop(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `deposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deposit: (
      params: CallParams<PoolArgs["obj"]["deposit()void"] | PoolArgs["tuple"]["deposit()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.deposit(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (
      params: CallParams<PoolArgs["obj"]["withdraw(uint64)void"] | PoolArgs["tuple"]["withdraw(uint64)void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.withdraw(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `swapToVUsd(address,uint64,bool)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: returns the difference between the old and the new value of vUsdBalance
     */
    swapToVUsd: (
      params: CallParams<
        | PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"]
        | PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.swapToVUsd(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `swapFromVUsd(address,uint64,uint64,bool)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: returns the difference between the old and the new value of vUsdBalance
     */
    swapFromVUsd: (
      params: CallParams<
        | PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
        | PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.swapFromVUsd(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setFeeShare(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setFeeShare: (
      params: CallParams<PoolArgs["obj"]["setFeeShare(uint64)void"] | PoolArgs["tuple"]["setFeeShare(uint64)void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.setFeeShare(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `adjustTotalLpAmount()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    adjustTotalLpAmount: (
      params: CallParams<
        PoolArgs["obj"]["adjustTotalLpAmount()void"] | PoolArgs["tuple"]["adjustTotalLpAmount()void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.adjustTotalLpAmount(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setBalanceRatioMinBP(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBalanceRatioMinBp: (
      params: CallParams<
        PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"] | PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.setBalanceRatioMinBp(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `stopDeposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stopDeposit: (
      params: CallParams<PoolArgs["obj"]["stopDeposit()void"] | PoolArgs["tuple"]["stopDeposit()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.stopDeposit(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `startDeposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startDeposit: (
      params: CallParams<PoolArgs["obj"]["startDeposit()void"] | PoolArgs["tuple"]["startDeposit()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.startDeposit(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `stopWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stopWithdraw: (
      params: CallParams<PoolArgs["obj"]["stopWithdraw()void"] | PoolArgs["tuple"]["stopWithdraw()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.stopWithdraw(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `startWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startWithdraw: (
      params: CallParams<PoolArgs["obj"]["startWithdraw()void"] | PoolArgs["tuple"]["startWithdraw()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.startWithdraw(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setStopAuthority(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setStopAuthority: (
      params: CallParams<
        PoolArgs["obj"]["setStopAuthority(address)void"] | PoolArgs["tuple"]["setStopAuthority(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.setStopAuthority(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setRouter(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setRouter: (
      params: CallParams<PoolArgs["obj"]["setRouter(address)void"] | PoolArgs["tuple"]["setRouter(address)void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.setRouter(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (
      params: CallParams<PoolArgs["obj"]["claimRewards()void"] | PoolArgs["tuple"]["claimRewards()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.claimRewards(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `setAdminFeeShare(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAdminFeeShare: (
      params: CallParams<
        PoolArgs["obj"]["setAdminFeeShare(uint64)void"] | PoolArgs["tuple"]["setAdminFeeShare(uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.setAdminFeeShare(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `claimAdminFee()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimAdminFee: (
      params: CallParams<PoolArgs["obj"]["claimAdminFee()void"] | PoolArgs["tuple"]["claimAdminFee()void"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.claimAdminFee(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `pendingReward(account)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pendingReward: (
      params: CallParams<
        PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.pendingReward(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `decimals()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    decimals: (
      params: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]> & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.decimals(params));
    },

    /**
     * Makes a call to the Pool smart contract using the `transferOwnership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferOwnership: (
      params: CallParams<
        PoolArgs["obj"]["transferOwnership(address)void"] | PoolArgs["tuple"]["transferOwnership(address)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(PoolParamsFactory.transferOwnership(params));
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Pool smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (
        params: CallParams<
          PoolArgs["obj"]["optInToApplication()void"] | PoolArgs["tuple"]["optInToApplication()void"]
        > &
          SendParams = { args: [] }
      ) => {
        const result = await this.appClient.send.optIn(PoolParamsFactory.optIn.optInToApplication(params));
        return { ...result, return: result.return as unknown as undefined | PoolReturns["optInToApplication()void"] };
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Pool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the Pool smart contract using the `optInAsset()void` ABI method.
     *
    * Opt-in the application account to the ASA stored in `this.asset`.
    This performs an inner axfer of 0 to the app's own address.
    Call once after deploy (or whenever you change the asset).

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInAsset: async (
      params: CallParams<PoolArgs["obj"]["optInAsset()void"] | PoolArgs["tuple"]["optInAsset()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.optInAsset(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["optInAsset()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noop: async (
      params: CallParams<PoolArgs["obj"]["noop()void"] | PoolArgs["tuple"]["noop()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.noop(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["noop()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `deposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deposit: async (
      params: CallParams<PoolArgs["obj"]["deposit()void"] | PoolArgs["tuple"]["deposit()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.deposit(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["deposit()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (
      params: CallParams<PoolArgs["obj"]["withdraw(uint64)void"] | PoolArgs["tuple"]["withdraw(uint64)void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.withdraw(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["withdraw(uint64)void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `swapToVUsd(address,uint64,bool)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: returns the difference between the old and the new value of vUsdBalance
     */
    swapToVUsd: async (
      params: CallParams<
        | PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"]
        | PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.swapToVUsd(params));
      return {
        ...result,
        return: result.return as unknown as undefined | PoolReturns["swapToVUsd(address,uint64,bool)uint64"],
      };
    },

    /**
     * Makes a call to the Pool smart contract using the `swapFromVUsd(address,uint64,uint64,bool)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: returns the difference between the old and the new value of vUsdBalance
     */
    swapFromVUsd: async (
      params: CallParams<
        | PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
        | PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.swapFromVUsd(params));
      return {
        ...result,
        return: result.return as unknown as undefined | PoolReturns["swapFromVUsd(address,uint64,uint64,bool)uint64"],
      };
    },

    /**
     * Makes a call to the Pool smart contract using the `setFeeShare(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setFeeShare: async (
      params: CallParams<PoolArgs["obj"]["setFeeShare(uint64)void"] | PoolArgs["tuple"]["setFeeShare(uint64)void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.setFeeShare(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["setFeeShare(uint64)void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `adjustTotalLpAmount()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    adjustTotalLpAmount: async (
      params: CallParams<
        PoolArgs["obj"]["adjustTotalLpAmount()void"] | PoolArgs["tuple"]["adjustTotalLpAmount()void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.adjustTotalLpAmount(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["adjustTotalLpAmount()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `setBalanceRatioMinBP(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBalanceRatioMinBp: async (
      params: CallParams<
        PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"] | PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.setBalanceRatioMinBp(params));
      return {
        ...result,
        return: result.return as unknown as undefined | PoolReturns["setBalanceRatioMinBP(uint64)void"],
      };
    },

    /**
     * Makes a call to the Pool smart contract using the `stopDeposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stopDeposit: async (
      params: CallParams<PoolArgs["obj"]["stopDeposit()void"] | PoolArgs["tuple"]["stopDeposit()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.stopDeposit(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["stopDeposit()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `startDeposit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startDeposit: async (
      params: CallParams<PoolArgs["obj"]["startDeposit()void"] | PoolArgs["tuple"]["startDeposit()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.startDeposit(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["startDeposit()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `stopWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stopWithdraw: async (
      params: CallParams<PoolArgs["obj"]["stopWithdraw()void"] | PoolArgs["tuple"]["stopWithdraw()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.stopWithdraw(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["stopWithdraw()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `startWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startWithdraw: async (
      params: CallParams<PoolArgs["obj"]["startWithdraw()void"] | PoolArgs["tuple"]["startWithdraw()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.startWithdraw(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["startWithdraw()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `setStopAuthority(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setStopAuthority: async (
      params: CallParams<
        PoolArgs["obj"]["setStopAuthority(address)void"] | PoolArgs["tuple"]["setStopAuthority(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.setStopAuthority(params));
      return {
        ...result,
        return: result.return as unknown as undefined | PoolReturns["setStopAuthority(address)void"],
      };
    },

    /**
     * Makes a call to the Pool smart contract using the `setRouter(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setRouter: async (
      params: CallParams<PoolArgs["obj"]["setRouter(address)void"] | PoolArgs["tuple"]["setRouter(address)void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.setRouter(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["setRouter(address)void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (
      params: CallParams<PoolArgs["obj"]["claimRewards()void"] | PoolArgs["tuple"]["claimRewards()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.claimRewards(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["claimRewards()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `setAdminFeeShare(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAdminFeeShare: async (
      params: CallParams<
        PoolArgs["obj"]["setAdminFeeShare(uint64)void"] | PoolArgs["tuple"]["setAdminFeeShare(uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.setAdminFeeShare(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["setAdminFeeShare(uint64)void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `claimAdminFee()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimAdminFee: async (
      params: CallParams<PoolArgs["obj"]["claimAdminFee()void"] | PoolArgs["tuple"]["claimAdminFee()void"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.claimAdminFee(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["claimAdminFee()void"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `pendingReward(account)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pendingReward: async (
      params: CallParams<
        PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.pendingReward(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["pendingReward(account)uint64"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `decimals()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    decimals: async (
      params: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]> &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.decimals(params));
      return { ...result, return: result.return as unknown as undefined | PoolReturns["decimals()uint64"] };
    },

    /**
     * Makes a call to the Pool smart contract using the `transferOwnership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferOwnership: async (
      params: CallParams<
        PoolArgs["obj"]["transferOwnership(address)void"] | PoolArgs["tuple"]["transferOwnership(address)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(PoolParamsFactory.transferOwnership(params));
      return {
        ...result,
        return: result.return as unknown as undefined | PoolReturns["transferOwnership(address)void"],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PoolClient(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the Pool smart contract using the `pendingReward(account)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async pendingReward(
    params: CallParams<
      PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
    >
  ) {
    const result = await this.appClient.send.call(PoolParamsFactory.pendingReward(params));
    return result.return as unknown as PoolReturns["pendingReward(account)uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the Pool smart contract using the `decimals()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async decimals(
    params: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]> = { args: [] }
  ) {
    const result = await this.appClient.send.call(PoolParamsFactory.decimals(params));
    return result.return as unknown as PoolReturns["decimals()uint64"];
  }

  /**
   * Methods to access state for the current Pool app
   */
  state = {
    /**
     * Methods to access global state for the current Pool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          feeShareBp: result.feeShareBP,
          router: result.router,
          tokenBalance: result.tokenBalance,
          vUsdBalance: result.vUsdBalance,
          balanceRatioMinBp: result.balanceRatioMinBP,
          reserves: result.reserves,
          a: result.a,
          d: result.d,
          tokenAmountReduce: result.tokenAmountReduce,
          tokenAmountIncrease: result.tokenAmountIncrease,
          stopAuthority: result.stopAuthority,
          canDeposit: result.canDeposit,
          canWithdraw: result.canWithdraw,
          asset: result.asset,
          adminFeeShareBp: result.adminFeeShareBP,
          totalSupply: result.totalSupply,
          accRewardPerShareP: new BinaryStateValue(result.accRewardPerShareP),
          adminFeeAmount: result.adminFeeAmount,
          owner: result.owner,
        };
      },
      /**
       * Get the current value of the feeShareBP key in global state
       */
      feeShareBp: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("feeShareBP")) as bigint | undefined;
      },
      /**
       * Get the current value of the router key in global state
       */
      router: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("router")) as string | undefined;
      },
      /**
       * Get the current value of the tokenBalance key in global state
       */
      tokenBalance: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("tokenBalance")) as bigint | undefined;
      },
      /**
       * Get the current value of the vUsdBalance key in global state
       */
      vUsdBalance: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("vUsdBalance")) as bigint | undefined;
      },
      /**
       * Get the current value of the balanceRatioMinBP key in global state
       */
      balanceRatioMinBp: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("balanceRatioMinBP")) as bigint | undefined;
      },
      /**
       * Get the current value of the reserves key in global state
       */
      reserves: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("reserves")) as bigint | undefined;
      },
      /**
       * Get the current value of the a key in global state
       */
      a: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("a")) as bigint | undefined;
      },
      /**
       * Get the current value of the d key in global state
       */
      d: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("d")) as bigint | undefined;
      },
      /**
       * Get the current value of the tokenAmountReduce key in global state
       */
      tokenAmountReduce: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("tokenAmountReduce")) as bigint | undefined;
      },
      /**
       * Get the current value of the tokenAmountIncrease key in global state
       */
      tokenAmountIncrease: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("tokenAmountIncrease")) as bigint | undefined;
      },
      /**
       * Get the current value of the stopAuthority key in global state
       */
      stopAuthority: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("stopAuthority")) as string | undefined;
      },
      /**
       * Get the current value of the canDeposit key in global state
       */
      canDeposit: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("canDeposit")) as bigint | undefined;
      },
      /**
       * Get the current value of the canWithdraw key in global state
       */
      canWithdraw: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("canWithdraw")) as bigint | undefined;
      },
      /**
       * Get the current value of the asset key in global state
       */
      asset: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("asset")) as bigint | undefined;
      },
      /**
       * Get the current value of the adminFeeShareBP key in global state
       */
      adminFeeShareBp: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("adminFeeShareBP")) as bigint | undefined;
      },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined;
      },
      /**
       * Get the current value of the accRewardPerShareP key in global state
       */
      accRewardPerShareP: async (): Promise<BinaryState> => {
        return new BinaryStateValue(
          (await this.appClient.state.global.getValue("accRewardPerShareP")) as Uint8Array | undefined
        );
      },
      /**
       * Get the current value of the adminFeeAmount key in global state
       */
      adminFeeAmount: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("adminFeeAmount")) as bigint | undefined;
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("owner")) as string | undefined;
      },
    },
    /**
     * Methods to access local state for the current Pool app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === "string" ? address : encodeAddress(address.publicKey);
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll();
          return {
            balance: result.balance,
            userRewardDebt: result.userRewardDebt,
          };
        },
        /**
         * Get the current value of the balance key in local state
         */
        balance: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state.local(encodedAddress).getValue("balance")) as bigint | undefined;
        },
        /**
         * Get the current value of the userRewardDebt key in local state
         */
        userRewardDebt: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state.local(encodedAddress).getValue("userRewardDebt")) as bigint | undefined;
        },
      };
    },
  };

  public newGroup(): PoolComposer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = [];
    return {
      /**
       * Add a optInAsset()void method call against the Pool contract
       */
      optInAsset(
        params: CallParams<PoolArgs["obj"]["optInAsset()void"] | PoolArgs["tuple"]["optInAsset()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.optInAsset(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a noop()void method call against the Pool contract
       */
      noop(
        params: CallParams<PoolArgs["obj"]["noop()void"] | PoolArgs["tuple"]["noop()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noop(params)));
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a deposit()void method call against the Pool contract
       */
      deposit(
        params: CallParams<PoolArgs["obj"]["deposit()void"] | PoolArgs["tuple"]["deposit()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.deposit(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a withdraw(uint64)void method call against the Pool contract
       */
      withdraw(
        params: CallParams<PoolArgs["obj"]["withdraw(uint64)void"] | PoolArgs["tuple"]["withdraw(uint64)void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.withdraw(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a swapToVUsd(address,uint64,bool)uint64 method call against the Pool contract
       */
      swapToVUsd(
        params: CallParams<
          | PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"]
          | PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.swapToVUsd(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("swapToVUsd(address,uint64,bool)uint64", v));
        return this;
      },
      /**
       * Add a swapFromVUsd(address,uint64,uint64,bool)uint64 method call against the Pool contract
       */
      swapFromVUsd(
        params: CallParams<
          | PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
          | PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.swapFromVUsd(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("swapFromVUsd(address,uint64,uint64,bool)uint64", v));
        return this;
      },
      /**
       * Add a setFeeShare(uint64)void method call against the Pool contract
       */
      setFeeShare(
        params: CallParams<
          PoolArgs["obj"]["setFeeShare(uint64)void"] | PoolArgs["tuple"]["setFeeShare(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setFeeShare(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a adjustTotalLpAmount()void method call against the Pool contract
       */
      adjustTotalLpAmount(
        params: CallParams<
          PoolArgs["obj"]["adjustTotalLpAmount()void"] | PoolArgs["tuple"]["adjustTotalLpAmount()void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.adjustTotalLpAmount(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setBalanceRatioMinBP(uint64)void method call against the Pool contract
       */
      setBalanceRatioMinBp(
        params: CallParams<
          PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"] | PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setBalanceRatioMinBp(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a stopDeposit()void method call against the Pool contract
       */
      stopDeposit(
        params: CallParams<PoolArgs["obj"]["stopDeposit()void"] | PoolArgs["tuple"]["stopDeposit()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.stopDeposit(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a startDeposit()void method call against the Pool contract
       */
      startDeposit(
        params: CallParams<PoolArgs["obj"]["startDeposit()void"] | PoolArgs["tuple"]["startDeposit()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.startDeposit(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a stopWithdraw()void method call against the Pool contract
       */
      stopWithdraw(
        params: CallParams<PoolArgs["obj"]["stopWithdraw()void"] | PoolArgs["tuple"]["stopWithdraw()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.stopWithdraw(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a startWithdraw()void method call against the Pool contract
       */
      startWithdraw(
        params: CallParams<PoolArgs["obj"]["startWithdraw()void"] | PoolArgs["tuple"]["startWithdraw()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.startWithdraw(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setStopAuthority(address)void method call against the Pool contract
       */
      setStopAuthority(
        params: CallParams<
          PoolArgs["obj"]["setStopAuthority(address)void"] | PoolArgs["tuple"]["setStopAuthority(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setStopAuthority(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setRouter(address)void method call against the Pool contract
       */
      setRouter(
        params: CallParams<PoolArgs["obj"]["setRouter(address)void"] | PoolArgs["tuple"]["setRouter(address)void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setRouter(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a claimRewards()void method call against the Pool contract
       */
      claimRewards(
        params: CallParams<PoolArgs["obj"]["claimRewards()void"] | PoolArgs["tuple"]["claimRewards()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.claimRewards(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a setAdminFeeShare(uint64)void method call against the Pool contract
       */
      setAdminFeeShare(
        params: CallParams<
          PoolArgs["obj"]["setAdminFeeShare(uint64)void"] | PoolArgs["tuple"]["setAdminFeeShare(uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.setAdminFeeShare(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a claimAdminFee()void method call against the Pool contract
       */
      claimAdminFee(
        params: CallParams<PoolArgs["obj"]["claimAdminFee()void"] | PoolArgs["tuple"]["claimAdminFee()void"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.claimAdminFee(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a pendingReward(account)uint64 method call against the Pool contract
       */
      pendingReward(
        params: CallParams<
          PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.pendingReward(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("pendingReward(account)uint64", v));
        return this;
      },
      /**
       * Add a decimals()uint64 method call against the Pool contract
       */
      decimals(
        params: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]> & {
          onComplete?: OnApplicationComplete.NoOpOC;
        }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.decimals(params))
        );
        resultMappers.push((v) => client.decodeReturnValue("decimals()uint64", v));
        return this;
      },
      /**
       * Add a transferOwnership(address)void method call against the Pool contract
       */
      transferOwnership(
        params: CallParams<
          PoolArgs["obj"]["transferOwnership(address)void"] | PoolArgs["tuple"]["transferOwnership(address)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.transferOwnership(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      get optIn() {
        return {
          optInToApplication: (
            params: CallParams<
              PoolArgs["obj"]["optInToApplication()void"] | PoolArgs["tuple"]["optInToApplication()void"]
            >
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params))
            );
            resultMappers.push(undefined);
            return this;
          },
        };
      },
      /**
       * Add a clear state call to the Pool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)));
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer));
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options ? composer.simulate() : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
    } as unknown as PoolComposer;
  }
}
export type PoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInAsset()void ABI method.
   *
  * Opt-in the application account to the ASA stored in `this.asset`.
  This performs an inner axfer of 0 to the app's own address.
  Call once after deploy (or whenever you change the asset).

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInAsset(
    params?: CallParams<PoolArgs["obj"]["optInAsset()void"] | PoolArgs["tuple"]["optInAsset()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["optInAsset()void"] | undefined]>;

  /**
   * Calls the noop()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(
    params?: CallParams<PoolArgs["obj"]["noop()void"] | PoolArgs["tuple"]["noop()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["noop()void"] | undefined]>;

  /**
   * Calls the deposit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(
    params?: CallParams<PoolArgs["obj"]["deposit()void"] | PoolArgs["tuple"]["deposit()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["deposit()void"] | undefined]>;

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(
    params?: CallParams<PoolArgs["obj"]["withdraw(uint64)void"] | PoolArgs["tuple"]["withdraw(uint64)void"]>
  ): PoolComposer<[...TReturns, PoolReturns["withdraw(uint64)void"] | undefined]>;

  /**
   * Calls the swapToVUsd(address,uint64,bool)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapToVUsd(
    params?: CallParams<
      | PoolArgs["obj"]["swapToVUsd(address,uint64,bool)uint64"]
      | PoolArgs["tuple"]["swapToVUsd(address,uint64,bool)uint64"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["swapToVUsd(address,uint64,bool)uint64"] | undefined]>;

  /**
   * Calls the swapFromVUsd(address,uint64,uint64,bool)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapFromVUsd(
    params?: CallParams<
      | PoolArgs["obj"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
      | PoolArgs["tuple"]["swapFromVUsd(address,uint64,uint64,bool)uint64"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["swapFromVUsd(address,uint64,uint64,bool)uint64"] | undefined]>;

  /**
   * Calls the setFeeShare(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFeeShare(
    params?: CallParams<PoolArgs["obj"]["setFeeShare(uint64)void"] | PoolArgs["tuple"]["setFeeShare(uint64)void"]>
  ): PoolComposer<[...TReturns, PoolReturns["setFeeShare(uint64)void"] | undefined]>;

  /**
   * Calls the adjustTotalLpAmount()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adjustTotalLpAmount(
    params?: CallParams<PoolArgs["obj"]["adjustTotalLpAmount()void"] | PoolArgs["tuple"]["adjustTotalLpAmount()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["adjustTotalLpAmount()void"] | undefined]>;

  /**
   * Calls the setBalanceRatioMinBP(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBalanceRatioMinBp(
    params?: CallParams<
      PoolArgs["obj"]["setBalanceRatioMinBP(uint64)void"] | PoolArgs["tuple"]["setBalanceRatioMinBP(uint64)void"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["setBalanceRatioMinBP(uint64)void"] | undefined]>;

  /**
   * Calls the stopDeposit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stopDeposit(
    params?: CallParams<PoolArgs["obj"]["stopDeposit()void"] | PoolArgs["tuple"]["stopDeposit()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["stopDeposit()void"] | undefined]>;

  /**
   * Calls the startDeposit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startDeposit(
    params?: CallParams<PoolArgs["obj"]["startDeposit()void"] | PoolArgs["tuple"]["startDeposit()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["startDeposit()void"] | undefined]>;

  /**
   * Calls the stopWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stopWithdraw(
    params?: CallParams<PoolArgs["obj"]["stopWithdraw()void"] | PoolArgs["tuple"]["stopWithdraw()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["stopWithdraw()void"] | undefined]>;

  /**
   * Calls the startWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startWithdraw(
    params?: CallParams<PoolArgs["obj"]["startWithdraw()void"] | PoolArgs["tuple"]["startWithdraw()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["startWithdraw()void"] | undefined]>;

  /**
   * Calls the setStopAuthority(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setStopAuthority(
    params?: CallParams<
      PoolArgs["obj"]["setStopAuthority(address)void"] | PoolArgs["tuple"]["setStopAuthority(address)void"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["setStopAuthority(address)void"] | undefined]>;

  /**
   * Calls the setRouter(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRouter(
    params?: CallParams<PoolArgs["obj"]["setRouter(address)void"] | PoolArgs["tuple"]["setRouter(address)void"]>
  ): PoolComposer<[...TReturns, PoolReturns["setRouter(address)void"] | undefined]>;

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(
    params?: CallParams<PoolArgs["obj"]["claimRewards()void"] | PoolArgs["tuple"]["claimRewards()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["claimRewards()void"] | undefined]>;

  /**
   * Calls the setAdminFeeShare(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAdminFeeShare(
    params?: CallParams<
      PoolArgs["obj"]["setAdminFeeShare(uint64)void"] | PoolArgs["tuple"]["setAdminFeeShare(uint64)void"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["setAdminFeeShare(uint64)void"] | undefined]>;

  /**
   * Calls the claimAdminFee()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimAdminFee(
    params?: CallParams<PoolArgs["obj"]["claimAdminFee()void"] | PoolArgs["tuple"]["claimAdminFee()void"]>
  ): PoolComposer<[...TReturns, PoolReturns["claimAdminFee()void"] | undefined]>;

  /**
   * Calls the pendingReward(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pendingReward(
    params?: CallParams<
      PoolArgs["obj"]["pendingReward(account)uint64"] | PoolArgs["tuple"]["pendingReward(account)uint64"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["pendingReward(account)uint64"] | undefined]>;

  /**
   * Calls the decimals()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  decimals(
    params?: CallParams<PoolArgs["obj"]["decimals()uint64"] | PoolArgs["tuple"]["decimals()uint64"]>
  ): PoolComposer<[...TReturns, PoolReturns["decimals()uint64"] | undefined]>;

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(
    params?: CallParams<
      PoolArgs["obj"]["transferOwnership(address)void"] | PoolArgs["tuple"]["transferOwnership(address)void"]
    >
  ): PoolComposer<[...TReturns, PoolReturns["transferOwnership(address)void"] | undefined]>;

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Pool smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(
      params?: CallParams<PoolArgs["obj"]["optInToApplication()void"] | PoolArgs["tuple"]["optInToApplication()void"]>
    ): PoolComposer<[...TReturns, PoolReturns["optInToApplication()void"] | undefined]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the Pool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PoolComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PoolComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<PoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: RawSimulateOptions
  ): Promise<PoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PoolComposerResults<TReturns>>;
};
export type PoolComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
